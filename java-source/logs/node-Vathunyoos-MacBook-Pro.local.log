[INFO ] 2019-04-26T02:37:38,171Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: /Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.contract-2d1041e8-00ba-4812-868a-d414ebb1940e.jar {}
[INFO ] 2019-04-26T02:37:38,197Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-b864792a-91f8-494d-a6fd-40aa2110dd48.jar {}
[INFO ] 2019-04-26T02:37:38,216Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-fd85fd73-689c-439c-a3b2-4457f7b9e853.jar {}
[INFO ] 2019-04-26T02:37:38,228Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-4b33c340-f0ad-4484-9e65-5934be8ead47.jar {}
[INFO ] 2019-04-26T02:37:38,236Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-d25ef6e4-b22b-4cf6-abc5-c042edbc2dec.jar {}
[INFO ] 2019-04-26T02:37:38,244Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-b38706fb-d07e-420f-8f82-209505a4767e.jar {}
[INFO ] 2019-04-26T02:37:38,266Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.contract-2d1041e8-00ba-4812-868a-d414ebb1940e.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.contract-b864792a-91f8-494d-a6fd-40aa2110dd48.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.contract-fd85fd73-689c-439c-a3b2-4457f7b9e853.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.contract-4b33c340-f0ad-4484-9e65-5934be8ead47.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.schema-d25ef6e4-b22b-4cf6-abc5-c042edbc2dec.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.schema-b38706fb-d07e-420f-8f82-209505a4767e.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T02:37:38,294Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:38,298Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:38,316Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.contract-2d1041e8-00ba-4812-868a-d414ebb1940e.jar {}
[INFO ] 2019-04-26T02:37:38,349Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.contract-b864792a-91f8-494d-a6fd-40aa2110dd48.jar {}
[INFO ] 2019-04-26T02:37:38,375Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.contract-fd85fd73-689c-439c-a3b2-4457f7b9e853.jar {}
[INFO ] 2019-04-26T02:37:38,388Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.contract-4b33c340-f0ad-4484-9e65-5934be8ead47.jar {}
[INFO ] 2019-04-26T02:37:38,414Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.schema-d25ef6e4-b22b-4cf6-abc5-c042edbc2dec.jar {}
[INFO ] 2019-04-26T02:37:38,448Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.example.schema-b38706fb-d07e-420f-8f82-209505a4767e.jar {}
[INFO ] 2019-04-26T02:37:38,578Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@62966c9f {}
[INFO ] 2019-04-26T02:37:39,405Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:39,442Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:39,448Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:41,506Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:42,035Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:42,038Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246262037) {}
[INFO ] 2019-04-26T02:37:42,052Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:42,164Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246262037) {}
[INFO ] 2019-04-26T02:37:42,166Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246262037) {}
[INFO ] 2019-04-26T02:37:42,340Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:42,386Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:42,393Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T02:37:42,496Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T02:37:42,706Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 13CA40031F96C097D98F22286AD117E4D6A19C9FD1F9C135F84CF58415D58F3F, not inserting the second time {}
[INFO ] 2019-04-26T02:37:42,783Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246262037) {}
[INFO ] 2019-04-26T02:37:42,808Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:42,811Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246262037) {}
[INFO ] 2019-04-26T02:37:42,814Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246262037) {}
[INFO ] 2019-04-26T02:37:42,816Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:42,818Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246262037) {}
[INFO ] 2019-04-26T02:37:42,824Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:42,825Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:42,851Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:37:42,863Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@9730004 {}
[INFO ] 2019-04-26T02:37:42,875Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:42,879Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:42,881Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:43,065Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:43,076Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:43,078Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246263078) {}
[INFO ] 2019-04-26T02:37:43,085Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:43,093Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246263078) {}
[INFO ] 2019-04-26T02:37:43,095Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246263078) {}
[INFO ] 2019-04-26T02:37:43,151Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:43,193Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:43,195Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:37:43,216Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D8E68C327DA1ADF2E872D1E419C39BC2ABCF92C5B3B9F16C97159C4A3D24A015, not inserting the second time {}
[INFO ] 2019-04-26T02:37:43,236Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246262037) {}
[INFO ] 2019-04-26T02:37:43,241Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:43,259Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246262037) {}
[INFO ] 2019-04-26T02:37:43,261Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246263078) {}
[INFO ] 2019-04-26T02:37:43,263Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:43,278Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246263078) {}
[INFO ] 2019-04-26T02:37:43,282Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246263078) {}
[INFO ] 2019-04-26T02:37:43,291Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:43,293Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246263078) {}
[INFO ] 2019-04-26T02:37:43,296Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246263078) {}
[INFO ] 2019-04-26T02:37:43,298Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:43,300Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246263078) {}
[INFO ] 2019-04-26T02:37:43,303Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:43,305Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:43,333Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:37:43,346Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@12bcedf8 {}
[INFO ] 2019-04-26T02:37:43,361Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:43,363Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:43,365Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:43,508Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:43,524Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:43,526Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246263526) {}
[INFO ] 2019-04-26T02:37:43,535Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:43,544Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246263526) {}
[INFO ] 2019-04-26T02:37:43,546Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246263526) {}
[INFO ] 2019-04-26T02:37:43,608Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:43,654Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:43,656Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:37:43,675Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C382B353A6A58FD5819D15132112FF7253D2DCAADF8A300F2C8636374D230637, not inserting the second time {}
[INFO ] 2019-04-26T02:37:43,686Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246262037) {}
[INFO ] 2019-04-26T02:37:43,689Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:43,703Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246262037) {}
[INFO ] 2019-04-26T02:37:43,704Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246263526) {}
[INFO ] 2019-04-26T02:37:43,708Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:43,721Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246263526) {}
[INFO ] 2019-04-26T02:37:43,724Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246263078) {}
[INFO ] 2019-04-26T02:37:43,727Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:43,746Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246263078) {}
[INFO ] 2019-04-26T02:37:43,749Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246263526) {}
[INFO ] 2019-04-26T02:37:43,754Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:43,769Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246263526) {}
[INFO ] 2019-04-26T02:37:43,770Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246263526) {}
[INFO ] 2019-04-26T02:37:43,778Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:43,779Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246263526) {}
[INFO ] 2019-04-26T02:37:43,782Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246263526) {}
[INFO ] 2019-04-26T02:37:43,783Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:43,785Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246263526) {}
[INFO ] 2019-04-26T02:37:43,805Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:37:43,806Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:37:44,557Z [Mock network] flow.[3f379e8a-1d1e-4db5-9c04-49c83d15f51c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8430392098597405772). {}
[INFO ] 2019-04-26T02:37:44,724Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8430392098597405772). {invocation_id=96dd3f03-accc-4c85-8e4e-4d3e754b7547, invocation_timestamp=2019-04-26T02:37:44.718Z, session_id=96dd3f03-accc-4c85-8e4e-4d3e754b7547, session_timestamp=2019-04-26T02:37:44.718Z}
[INFO ] 2019-04-26T02:37:44,989Z [Mock network] flow.[3f379e8a-1d1e-4db5-9c04-49c83d15f51c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3677651543779806696). {}
[INFO ] 2019-04-26T02:37:45,025Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3677651543779806696). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=62d6e5b9-6756-4ea2-9bee-117a6a9137fb, invocation_timestamp=2019-04-26T02:37:45.024Z, session_id=62d6e5b9-6756-4ea2-9bee-117a6a9137fb, session_timestamp=2019-04-26T02:37:45.024Z}
[INFO ] 2019-04-26T02:37:45,144Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:45,145Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:45,151Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7ed47927 {}
[INFO ] 2019-04-26T02:37:45,168Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:45,171Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:45,173Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:45,288Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:45,297Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:45,299Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246265299) {}
[INFO ] 2019-04-26T02:37:45,303Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:45,315Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246265299) {}
[INFO ] 2019-04-26T02:37:45,317Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246265299) {}
[INFO ] 2019-04-26T02:37:45,483Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:45,529Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:45,532Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T02:37:45,540Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T02:37:45,552Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 022396C1BF322BF8F4220AF4D74D7475B53BF2CC43E944FDC22D3B50EFAC61F3, not inserting the second time {}
[INFO ] 2019-04-26T02:37:45,559Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246265299) {}
[INFO ] 2019-04-26T02:37:45,563Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:45,565Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246265299) {}
[INFO ] 2019-04-26T02:37:45,566Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246265299) {}
[INFO ] 2019-04-26T02:37:45,567Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:45,568Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246265299) {}
[INFO ] 2019-04-26T02:37:45,571Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:45,572Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:45,588Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:37:45,597Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@25a65e20 {}
[INFO ] 2019-04-26T02:37:45,606Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:45,607Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:45,608Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:45,743Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:45,755Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:45,756Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246265756) {}
[INFO ] 2019-04-26T02:37:45,764Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:45,769Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246265756) {}
[INFO ] 2019-04-26T02:37:45,772Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246265756) {}
[INFO ] 2019-04-26T02:37:45,838Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:45,892Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:45,893Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:37:45,910Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B7975B70D87DC5357DD363C1820D12E8FB34FEE70CAA9A9353C3278D0F7DDCBA, not inserting the second time {}
[INFO ] 2019-04-26T02:37:45,916Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246265299) {}
[INFO ] 2019-04-26T02:37:45,921Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:45,932Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246265299) {}
[INFO ] 2019-04-26T02:37:45,934Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246265756) {}
[INFO ] 2019-04-26T02:37:45,937Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:45,944Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246265756) {}
[INFO ] 2019-04-26T02:37:45,946Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246265756) {}
[INFO ] 2019-04-26T02:37:45,951Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:45,953Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246265756) {}
[INFO ] 2019-04-26T02:37:45,954Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246265756) {}
[INFO ] 2019-04-26T02:37:45,955Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:45,956Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246265756) {}
[INFO ] 2019-04-26T02:37:45,964Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:45,966Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:45,984Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:37:45,993Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@47174ef0 {}
[INFO ] 2019-04-26T02:37:46,038Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:46,041Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:46,042Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:46,174Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:46,184Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:46,186Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246266186) {}
[INFO ] 2019-04-26T02:37:46,192Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:46,203Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246266186) {}
[INFO ] 2019-04-26T02:37:46,206Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246266186) {}
[INFO ] 2019-04-26T02:37:46,269Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:46,320Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:46,322Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:37:46,345Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E9AA44A9B9B0CB6FAD7FB157F6390C61AE3EC1A18CC925E02AE342A8B0FBA177, not inserting the second time {}
[INFO ] 2019-04-26T02:37:46,356Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246265299) {}
[INFO ] 2019-04-26T02:37:46,358Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:46,366Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246265299) {}
[INFO ] 2019-04-26T02:37:46,367Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246266186) {}
[INFO ] 2019-04-26T02:37:46,369Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:46,377Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246266186) {}
[INFO ] 2019-04-26T02:37:46,378Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246265756) {}
[INFO ] 2019-04-26T02:37:46,381Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:46,391Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246265756) {}
[INFO ] 2019-04-26T02:37:46,392Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246266186) {}
[INFO ] 2019-04-26T02:37:46,394Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:46,407Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246266186) {}
[INFO ] 2019-04-26T02:37:46,409Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246266186) {}
[INFO ] 2019-04-26T02:37:46,418Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:46,420Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246266186) {}
[INFO ] 2019-04-26T02:37:46,422Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246266186) {}
[INFO ] 2019-04-26T02:37:46,424Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:46,425Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246266186) {}
[INFO ] 2019-04-26T02:37:46,426Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:37:46,427Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[WARN ] 2019-04-26T02:37:46,485Z [Mock network] flow.[857084dd-fe7e-49fc-a26e-40279988612e].run - Flow finished with exception {}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The IOU's value must be non-negative., contract: com.example.contract.IOUContract, transaction: 3D387FD56D521B0D316D09A75A76E1DF126A4CB2A41E950400D80BA2639DD134
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:127) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:80) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:143) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:81) ~[classes/:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:32) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The IOU's value must be non-negative.
	at com.example.contract.IOUContract.verify(IOUContract.kt:70) ~[classes/:?]
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:125) ~[corda-core-3.3-corda.jar:?]
	... 17 more
[INFO ] 2019-04-26T02:37:46,567Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:46,568Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:46,574Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4d9ef371 {}
[INFO ] 2019-04-26T02:37:46,596Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:46,600Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:46,601Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:46,705Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:46,713Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:46,714Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246266714) {}
[INFO ] 2019-04-26T02:37:46,719Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:46,728Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246266714) {}
[INFO ] 2019-04-26T02:37:46,729Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246266714) {}
[INFO ] 2019-04-26T02:37:46,791Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:46,839Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:46,841Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T02:37:46,849Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T02:37:46,860Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8CE39DA0C3F596D982E73759EC22E4AA506990A7F3C31EFB37C6689425114FC8, not inserting the second time {}
[INFO ] 2019-04-26T02:37:46,869Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246266714) {}
[INFO ] 2019-04-26T02:37:46,873Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:46,875Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246266714) {}
[INFO ] 2019-04-26T02:37:46,876Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246266714) {}
[INFO ] 2019-04-26T02:37:46,877Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:46,878Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246266714) {}
[INFO ] 2019-04-26T02:37:46,884Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:46,885Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:46,900Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:37:46,908Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@691396a0 {}
[INFO ] 2019-04-26T02:37:46,916Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:46,918Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:46,919Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:47,026Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:47,039Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:47,041Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246267041) {}
[INFO ] 2019-04-26T02:37:47,049Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:47,056Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246267041) {}
[INFO ] 2019-04-26T02:37:47,057Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246267041) {}
[INFO ] 2019-04-26T02:37:47,112Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:47,158Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:47,160Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:37:47,176Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 64D30F905135D6BC38BED637EB8B1D5A8AE0911DD9504E9230C16107D026AD31, not inserting the second time {}
[INFO ] 2019-04-26T02:37:47,184Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246266714) {}
[INFO ] 2019-04-26T02:37:47,186Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:47,194Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246266714) {}
[INFO ] 2019-04-26T02:37:47,195Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246267041) {}
[INFO ] 2019-04-26T02:37:47,197Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:47,204Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246267041) {}
[INFO ] 2019-04-26T02:37:47,205Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246267041) {}
[INFO ] 2019-04-26T02:37:47,209Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:47,210Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246267041) {}
[INFO ] 2019-04-26T02:37:47,211Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246267041) {}
[INFO ] 2019-04-26T02:37:47,213Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:47,214Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246267041) {}
[INFO ] 2019-04-26T02:37:47,217Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:47,218Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:47,233Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:37:47,243Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@a2dfad {}
[INFO ] 2019-04-26T02:37:47,258Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:47,260Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:47,261Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:47,371Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:47,379Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:47,380Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246267380) {}
[INFO ] 2019-04-26T02:37:47,385Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:47,387Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246267380) {}
[INFO ] 2019-04-26T02:37:47,389Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246267380) {}
[INFO ] 2019-04-26T02:37:47,438Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:47,485Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:47,488Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:37:47,507Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 795C2E94076B01A1C1CA0AF007C735A5AB49873633E63B9ACEAFB64C1A2DC826, not inserting the second time {}
[INFO ] 2019-04-26T02:37:47,513Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246266714) {}
[INFO ] 2019-04-26T02:37:47,516Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:47,526Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246266714) {}
[INFO ] 2019-04-26T02:37:47,529Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246267380) {}
[INFO ] 2019-04-26T02:37:47,532Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:47,542Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246267380) {}
[INFO ] 2019-04-26T02:37:47,545Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246267041) {}
[INFO ] 2019-04-26T02:37:47,548Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:47,557Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246267041) {}
[INFO ] 2019-04-26T02:37:47,558Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246267380) {}
[INFO ] 2019-04-26T02:37:47,560Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:47,567Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246267380) {}
[INFO ] 2019-04-26T02:37:47,568Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246267380) {}
[INFO ] 2019-04-26T02:37:47,572Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:47,573Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246267380) {}
[INFO ] 2019-04-26T02:37:47,575Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246267380) {}
[INFO ] 2019-04-26T02:37:47,576Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:47,577Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246267380) {}
[INFO ] 2019-04-26T02:37:47,578Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:37:47,579Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:37:47,643Z [Mock network] flow.[1e075ff5-4abb-4c8a-953a-0820041d4c66].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2221867273761585586). {}
[INFO ] 2019-04-26T02:37:47,730Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2221867273761585586). {invocation_id=6d405c68-26ed-4985-84c7-49efc94114ed, invocation_timestamp=2019-04-26T02:37:47.726Z, session_id=6d405c68-26ed-4985-84c7-49efc94114ed, session_timestamp=2019-04-26T02:37:47.726Z}
[INFO ] 2019-04-26T02:37:47,903Z [Mock network] flow.[1e075ff5-4abb-4c8a-953a-0820041d4c66].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4545785377419119243). {}
[INFO ] 2019-04-26T02:37:47,920Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4545785377419119243). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=f5014961-339b-4f71-9d3e-380bfc745e49, invocation_timestamp=2019-04-26T02:37:47.918Z, session_id=f5014961-339b-4f71-9d3e-380bfc745e49, session_timestamp=2019-04-26T02:37:47.918Z}
[INFO ] 2019-04-26T02:37:48,031Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:48,035Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:48,041Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@bb832f0 {}
[INFO ] 2019-04-26T02:37:48,051Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:48,052Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:48,053Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:48,139Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:48,150Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:48,152Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246268152) {}
[INFO ] 2019-04-26T02:37:48,156Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:48,163Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246268152) {}
[INFO ] 2019-04-26T02:37:48,164Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246268152) {}
[INFO ] 2019-04-26T02:37:48,212Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:48,261Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:48,263Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T02:37:48,267Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T02:37:48,280Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E01484FA95997A82472E5EC7D91D5CE79E7BB7D8498631DEAD1DA5765A77CFAA, not inserting the second time {}
[INFO ] 2019-04-26T02:37:48,289Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246268152) {}
[INFO ] 2019-04-26T02:37:48,292Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:48,294Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246268152) {}
[INFO ] 2019-04-26T02:37:48,297Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246268152) {}
[INFO ] 2019-04-26T02:37:48,298Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:48,299Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246268152) {}
[INFO ] 2019-04-26T02:37:48,304Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:48,306Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:48,322Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:37:48,330Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3249c81a {}
[INFO ] 2019-04-26T02:37:48,340Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:48,341Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:48,343Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:48,411Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:48,419Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:48,420Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246268420) {}
[INFO ] 2019-04-26T02:37:48,424Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:48,427Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246268420) {}
[INFO ] 2019-04-26T02:37:48,428Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246268420) {}
[INFO ] 2019-04-26T02:37:48,477Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:48,526Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:48,527Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:37:48,547Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3A3E77F5FC84905B7C71725E4710919C2F4A41CF2C86E0363BAC17B4281B74C8, not inserting the second time {}
[INFO ] 2019-04-26T02:37:48,554Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246268152) {}
[INFO ] 2019-04-26T02:37:48,557Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:48,565Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246268152) {}
[INFO ] 2019-04-26T02:37:48,566Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246268420) {}
[INFO ] 2019-04-26T02:37:48,570Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:48,577Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246268420) {}
[INFO ] 2019-04-26T02:37:48,579Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246268420) {}
[INFO ] 2019-04-26T02:37:48,585Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:48,587Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246268420) {}
[INFO ] 2019-04-26T02:37:48,590Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246268420) {}
[INFO ] 2019-04-26T02:37:48,591Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:48,592Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246268420) {}
[INFO ] 2019-04-26T02:37:48,595Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:48,596Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:48,610Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:37:48,617Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@9fcca41 {}
[INFO ] 2019-04-26T02:37:48,623Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:48,625Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:48,626Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:48,715Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:48,727Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:48,728Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246268728) {}
[INFO ] 2019-04-26T02:37:48,733Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:48,739Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246268728) {}
[INFO ] 2019-04-26T02:37:48,740Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246268728) {}
[INFO ] 2019-04-26T02:37:48,792Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:48,835Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:48,837Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:37:48,852Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 11E3D08D163940AF8172AFD91B46EBA09EF0D6C869819D37866A8732106325C9, not inserting the second time {}
[INFO ] 2019-04-26T02:37:48,857Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246268152) {}
[INFO ] 2019-04-26T02:37:48,859Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:48,865Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246268152) {}
[INFO ] 2019-04-26T02:37:48,866Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246268728) {}
[INFO ] 2019-04-26T02:37:48,868Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:48,875Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246268728) {}
[INFO ] 2019-04-26T02:37:48,876Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246268420) {}
[INFO ] 2019-04-26T02:37:48,877Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:48,883Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246268420) {}
[INFO ] 2019-04-26T02:37:48,884Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246268728) {}
[INFO ] 2019-04-26T02:37:48,886Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:48,891Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246268728) {}
[INFO ] 2019-04-26T02:37:48,892Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246268728) {}
[INFO ] 2019-04-26T02:37:48,898Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:48,899Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246268728) {}
[INFO ] 2019-04-26T02:37:48,901Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246268728) {}
[INFO ] 2019-04-26T02:37:48,902Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:48,903Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246268728) {}
[INFO ] 2019-04-26T02:37:48,904Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:37:48,906Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:37:48,962Z [Mock network] flow.[565ba157-090a-4996-90dd-49a9edd4b6cb].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=1117179973051630238). {}
[INFO ] 2019-04-26T02:37:49,025Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=1117179973051630238). {invocation_id=011cc32f-8c3a-4c54-b4d7-458e724f39a8, invocation_timestamp=2019-04-26T02:37:49.024Z, session_id=011cc32f-8c3a-4c54-b4d7-458e724f39a8, session_timestamp=2019-04-26T02:37:49.024Z}
[INFO ] 2019-04-26T02:37:49,176Z [Mock network] flow.[565ba157-090a-4996-90dd-49a9edd4b6cb].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7080696220070064983). {}
[INFO ] 2019-04-26T02:37:49,198Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7080696220070064983). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=dc4d828e-7a46-4d3e-bb29-71c206d0c957, invocation_timestamp=2019-04-26T02:37:49.195Z, session_id=dc4d828e-7a46-4d3e-bb29-71c206d0c957, session_timestamp=2019-04-26T02:37:49.195Z}
[INFO ] 2019-04-26T02:37:49,295Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:49,297Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:49,305Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1425f44b {}
[INFO ] 2019-04-26T02:37:49,314Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:49,318Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:49,320Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:49,412Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:49,420Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:49,421Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246269421) {}
[INFO ] 2019-04-26T02:37:49,425Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:49,435Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246269421) {}
[INFO ] 2019-04-26T02:37:49,436Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246269421) {}
[INFO ] 2019-04-26T02:37:49,491Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:49,533Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:49,534Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T02:37:49,544Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T02:37:49,556Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9D180FEDDD36EEE15E7F7A9BAEE193073E16AB85C75711896E3B64106ED05D5F, not inserting the second time {}
[INFO ] 2019-04-26T02:37:49,562Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246269421) {}
[INFO ] 2019-04-26T02:37:49,569Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:49,570Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246269421) {}
[INFO ] 2019-04-26T02:37:49,572Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246269421) {}
[INFO ] 2019-04-26T02:37:49,573Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:49,574Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246269421) {}
[INFO ] 2019-04-26T02:37:49,577Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:49,579Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:49,595Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:37:49,602Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@102abf66 {}
[INFO ] 2019-04-26T02:37:49,610Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:49,612Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:49,612Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:49,735Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:49,743Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:49,746Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246269746) {}
[INFO ] 2019-04-26T02:37:49,751Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:49,755Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246269746) {}
[INFO ] 2019-04-26T02:37:49,757Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246269746) {}
[INFO ] 2019-04-26T02:37:49,813Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:49,859Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:49,860Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:37:49,875Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3E3324C35D5CAD1FAACB00611A7A0061DEC0FE28CD0DDDC9D59FFE3F09D39F24, not inserting the second time {}
[INFO ] 2019-04-26T02:37:49,880Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246269421) {}
[INFO ] 2019-04-26T02:37:49,882Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:49,890Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246269421) {}
[INFO ] 2019-04-26T02:37:49,891Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246269746) {}
[INFO ] 2019-04-26T02:37:49,892Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:49,897Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246269746) {}
[INFO ] 2019-04-26T02:37:49,898Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246269746) {}
[INFO ] 2019-04-26T02:37:49,901Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:49,902Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246269746) {}
[INFO ] 2019-04-26T02:37:49,903Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246269746) {}
[INFO ] 2019-04-26T02:37:49,904Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:49,905Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246269746) {}
[INFO ] 2019-04-26T02:37:49,907Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:49,908Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:49,920Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:37:49,926Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1ec7b3f2 {}
[INFO ] 2019-04-26T02:37:49,933Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:49,934Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:49,935Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:50,040Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:50,049Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:50,050Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246270050) {}
[INFO ] 2019-04-26T02:37:50,054Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:50,058Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246270050) {}
[INFO ] 2019-04-26T02:37:50,059Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246270050) {}
[INFO ] 2019-04-26T02:37:50,107Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:50,148Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:50,150Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:37:50,171Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3E5B7BDB4754ABD9DCB4AF6A43ADE91D6AF42763B935E94BE73A6E7F2D4DF660, not inserting the second time {}
[INFO ] 2019-04-26T02:37:50,181Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246269421) {}
[INFO ] 2019-04-26T02:37:50,183Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:50,193Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246269421) {}
[INFO ] 2019-04-26T02:37:50,194Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246270050) {}
[INFO ] 2019-04-26T02:37:50,196Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:50,207Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246270050) {}
[INFO ] 2019-04-26T02:37:50,208Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246269746) {}
[INFO ] 2019-04-26T02:37:50,210Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:50,216Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246269746) {}
[INFO ] 2019-04-26T02:37:50,218Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246270050) {}
[INFO ] 2019-04-26T02:37:50,219Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:50,230Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246270050) {}
[INFO ] 2019-04-26T02:37:50,231Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246270050) {}
[INFO ] 2019-04-26T02:37:50,235Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:50,237Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246270050) {}
[INFO ] 2019-04-26T02:37:50,238Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246270050) {}
[INFO ] 2019-04-26T02:37:50,240Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:50,241Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246270050) {}
[INFO ] 2019-04-26T02:37:50,242Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:37:50,244Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:37:50,297Z [Mock network] flow.[5b16c637-8072-4703-a1d3-b904c398a40e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-5387312611728792073). {}
[INFO ] 2019-04-26T02:37:50,337Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-5387312611728792073). {invocation_id=581136fa-0724-490c-8193-b849c2a11323, invocation_timestamp=2019-04-26T02:37:50.336Z, session_id=581136fa-0724-490c-8193-b849c2a11323, session_timestamp=2019-04-26T02:37:50.336Z}
[INFO ] 2019-04-26T02:37:50,462Z [Mock network] flow.[5b16c637-8072-4703-a1d3-b904c398a40e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7048942242768710438). {}
[INFO ] 2019-04-26T02:37:50,479Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7048942242768710438). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=bd79be11-822e-4a4c-aee9-b699162439aa, invocation_timestamp=2019-04-26T02:37:50.477Z, session_id=bd79be11-822e-4a4c-aee9-b699162439aa, session_timestamp=2019-04-26T02:37:50.477Z}
[INFO ] 2019-04-26T02:37:50,553Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:50,554Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:50,559Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@50ba8e64 {}
[INFO ] 2019-04-26T02:37:50,569Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:50,570Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:50,570Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:50,652Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:50,657Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:50,658Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246270658) {}
[INFO ] 2019-04-26T02:37:50,663Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:50,668Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246270658) {}
[INFO ] 2019-04-26T02:37:50,669Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246270658) {}
[INFO ] 2019-04-26T02:37:50,723Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:50,765Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:50,766Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T02:37:50,771Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T02:37:50,781Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 86658189C64C9FF78132999D23B1FEBC7B67145FC387EDF6904CE2199FAD463B, not inserting the second time {}
[INFO ] 2019-04-26T02:37:50,788Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246270658) {}
[INFO ] 2019-04-26T02:37:50,792Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:50,793Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246270658) {}
[INFO ] 2019-04-26T02:37:50,793Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246270658) {}
[INFO ] 2019-04-26T02:37:50,794Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:50,795Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246270658) {}
[INFO ] 2019-04-26T02:37:50,798Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:50,799Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:50,814Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:37:50,822Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@14719b71 {}
[INFO ] 2019-04-26T02:37:50,831Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:50,833Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:50,833Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:50,909Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:50,916Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:50,917Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246270917) {}
[INFO ] 2019-04-26T02:37:50,920Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:50,923Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246270917) {}
[INFO ] 2019-04-26T02:37:50,924Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246270917) {}
[INFO ] 2019-04-26T02:37:50,969Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:51,020Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:51,022Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:37:51,041Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E1F4F6733620E39594847A6669F02B4BA11913DC527B22BB181A795842F79F09, not inserting the second time {}
[INFO ] 2019-04-26T02:37:51,048Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246270658) {}
[INFO ] 2019-04-26T02:37:51,050Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:51,060Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246270658) {}
[INFO ] 2019-04-26T02:37:51,061Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246270917) {}
[INFO ] 2019-04-26T02:37:51,063Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:51,072Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246270917) {}
[INFO ] 2019-04-26T02:37:51,073Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246270917) {}
[INFO ] 2019-04-26T02:37:51,078Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:51,079Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246270917) {}
[INFO ] 2019-04-26T02:37:51,081Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246270917) {}
[INFO ] 2019-04-26T02:37:51,082Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:51,082Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246270917) {}
[INFO ] 2019-04-26T02:37:51,085Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:37:51,086Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:37:51,102Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:37:51,111Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4d228131 {}
[INFO ] 2019-04-26T02:37:51,118Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:37:51,119Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:51,120Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:51,191Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:37:51,202Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:37:51,203Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246271203) {}
[INFO ] 2019-04-26T02:37:51,207Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:51,211Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246271203) {}
[INFO ] 2019-04-26T02:37:51,212Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246271203) {}
[INFO ] 2019-04-26T02:37:51,267Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[INFO ] 2019-04-26T02:37:51,316Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C0BB8B6C5C6D4142262C08949B05E25234D7C6FED589EC0FCC8FBD6D6A05A4F7 {}
[WARN ] 2019-04-26T02:37:51,318Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:37:51,336Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8106C46D87FBE0FF02C95BA2F475018C8AB63C5FE8128B62C1A12CFB41FFAECC, not inserting the second time {}
[INFO ] 2019-04-26T02:37:51,343Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246270658) {}
[INFO ] 2019-04-26T02:37:51,345Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:51,350Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246270658) {}
[INFO ] 2019-04-26T02:37:51,351Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246271203) {}
[INFO ] 2019-04-26T02:37:51,353Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:51,358Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246271203) {}
[INFO ] 2019-04-26T02:37:51,359Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246270917) {}
[INFO ] 2019-04-26T02:37:51,360Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:51,365Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246270917) {}
[INFO ] 2019-04-26T02:37:51,366Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246271203) {}
[INFO ] 2019-04-26T02:37:51,367Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:37:51,373Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246271203) {}
[INFO ] 2019-04-26T02:37:51,373Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246271203) {}
[INFO ] 2019-04-26T02:37:51,376Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:51,377Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246271203) {}
[INFO ] 2019-04-26T02:37:51,377Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246271203) {}
[INFO ] 2019-04-26T02:37:51,379Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:37:51,380Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246271203) {}
[INFO ] 2019-04-26T02:37:51,381Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:37:51,381Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:37:51,417Z [Mock network] flow.[c38663ad-98fa-4dd4-a878-da7516bc55dd].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4381708172394397209). {}
[INFO ] 2019-04-26T02:37:51,513Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4381708172394397209). {invocation_id=bc6978d8-3ed9-44a9-9dd1-0d69311d6d28, invocation_timestamp=2019-04-26T02:37:51.512Z, session_id=bc6978d8-3ed9-44a9-9dd1-0d69311d6d28, session_timestamp=2019-04-26T02:37:51.512Z}
[INFO ] 2019-04-26T02:37:51,618Z [Mock network] flow.[c38663ad-98fa-4dd4-a878-da7516bc55dd].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1985553244065678306). {}
[INFO ] 2019-04-26T02:37:51,629Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1985553244065678306). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=794fd968-086e-43fe-9691-1b5aa05846e6, invocation_timestamp=2019-04-26T02:37:51.628Z, session_id=794fd968-086e-43fe-9691-1b5aa05846e6, session_timestamp=2019-04-26T02:37:51.628Z}
[INFO ] 2019-04-26T02:37:51,673Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-26T02:37:51,723Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
