[INFO ] 2019-05-06T03:52:44,971Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-a9f687dc-0daa-4903-b13d-a5c34f42c611.jar {}
[INFO ] 2019-05-06T03:52:45,030Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-9d144ef9-ab75-4073-9f95-fd0c6f260b63.jar {}
[INFO ] 2019-05-06T03:52:45,045Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-f5720080-91a1-42aa-9069-f29a1dbdeada.jar {}
[INFO ] 2019-05-06T03:52:45,076Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-a9f687dc-0daa-4903-b13d-a5c34f42c611.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-9d144ef9-ab75-4073-9f95-fd0c6f260b63.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-f5720080-91a1-42aa-9069-f29a1dbdeada.jar, rootPackageName=null) {}
[INFO ] 2019-05-06T03:52:45,111Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T03:52:45,114Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T03:52:45,130Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-a9f687dc-0daa-4903-b13d-a5c34f42c611.jar {}
[INFO ] 2019-05-06T03:52:45,159Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-9d144ef9-ab75-4073-9f95-fd0c6f260b63.jar {}
[INFO ] 2019-05-06T03:52:45,183Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-f5720080-91a1-42aa-9069-f29a1dbdeada.jar {}
[INFO ] 2019-05-06T03:52:45,329Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@14f254f {}
[INFO ] 2019-05-06T03:52:46,188Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T03:52:46,249Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T03:52:46,256Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T03:52:48,795Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T03:52:49,392Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T03:52:49,395Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:49,408Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:49,528Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:49,531Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:49,719Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T03:52:49,726Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-06T03:52:49,829Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-05-06T03:52:50,048Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B6FD88458C7E6D53DB892DC17D37724D6156838859D681C712C38B0359C38AAC, not inserting the second time {}
[INFO ] 2019-05-06T03:52:50,117Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:50,142Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T03:52:50,143Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:50,145Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:50,148Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T03:52:50,152Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:50,159Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T03:52:50,161Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T03:52:50,184Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-06T03:52:50,197Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5fffbcd2 {}
[INFO ] 2019-05-06T03:52:50,209Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T03:52:50,212Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T03:52:50,215Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T03:52:50,420Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T03:52:50,429Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T03:52:50,431Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:50,437Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:50,443Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:50,444Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:50,519Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T03:52:50,521Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-06T03:52:50,542Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 648BE18DE59607E9F07E5005CEABD716F5BC3604A1B79525AC5B220F4EDCFE07, not inserting the second time {}
[INFO ] 2019-05-06T03:52:50,551Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:50,559Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:50,571Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:50,573Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:50,577Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:50,587Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:50,589Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:50,601Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T03:52:50,606Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:50,608Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:50,616Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T03:52:50,618Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:50,625Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T03:52:50,629Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T03:52:50,664Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-06T03:52:50,679Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@37500808 {}
[INFO ] 2019-05-06T03:52:50,699Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T03:52:50,702Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T03:52:50,706Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T03:52:50,893Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T03:52:50,913Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T03:52:50,915Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:50,923Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:50,928Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:50,930Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:50,990Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T03:52:50,992Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-06T03:52:51,012Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9126F062AA6DE332FC9963238104124707DFC60DF651CFAAA220484ABA486B3E, not inserting the second time {}
[INFO ] 2019-05-06T03:52:51,023Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:51,026Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:51,041Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:51,047Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:51,051Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:51,069Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:51,074Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:51,082Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:51,098Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:51,102Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:51,106Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:51,120Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:51,122Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:51,131Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T03:52:51,133Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:51,134Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:51,136Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T03:52:51,137Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:51,141Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T03:52:51,143Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T03:52:51,159Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-06T03:52:51,171Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@40053c7a {}
[INFO ] 2019-05-06T03:52:51,187Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T03:52:51,189Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T03:52:51,194Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T03:52:51,348Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T03:52:51,364Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T03:52:51,367Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,374Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:51,381Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,383Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,441Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T03:52:51,442Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-06T03:52:51,458Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6712EF567401B8B30B55287DA90ABD24DE49B8AEB2A8087B0858462CDD7FEFE9, not inserting the second time {}
[INFO ] 2019-05-06T03:52:51,465Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:51,468Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:51,481Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557114769395) {}
[INFO ] 2019-05-06T03:52:51,482Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,485Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:51,497Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,498Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:51,501Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:51,510Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557114770431) {}
[INFO ] 2019-05-06T03:52:51,512Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,515Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:51,529Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,532Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:51,535Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:51,551Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557114770915) {}
[INFO ] 2019-05-06T03:52:51,555Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,560Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T03:52:51,581Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,584Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,591Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T03:52:51,595Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,598Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,600Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T03:52:51,601Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557114771367) {}
[INFO ] 2019-05-06T03:52:51,624Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-06T03:52:51,625Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-06T03:52:51,627Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-06T03:52:52,409Z [Mock network] flow.[849cb809-d968-4615-a070-f27a9faca353].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=378137058004606742). {}
[INFO ] 2019-05-06T03:52:52,568Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=378137058004606742). {invocation_id=46a01b22-1124-4d49-a710-3e2e238ac4ec, invocation_timestamp=2019-05-06T03:52:52.561Z, session_id=46a01b22-1124-4d49-a710-3e2e238ac4ec, session_timestamp=2019-05-06T03:52:52.561Z}
[INFO ] 2019-05-06T03:52:52,869Z [Mock network] flow.[849cb809-d968-4615-a070-f27a9faca353].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2707257467369492840). {}
[INFO ] 2019-05-06T03:52:52,896Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2707257467369492840). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=34e09b73-34e7-4b84-a1f4-997d11a3e27d, invocation_timestamp=2019-05-06T03:52:52.895Z, session_id=34e09b73-34e7-4b84-a1f4-997d11a3e27d, session_timestamp=2019-05-06T03:52:52.895Z}
[INFO ] 2019-05-06T03:52:52,987Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.FungibleAsset, criteria: net.corda.core.node.services.vault.QueryCriteria$AndComposition@3117fd8, pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-05-06T04:01:34,007Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-a4b72c38-c089-4d66-96ed-dc9587890094.jar {}
[INFO ] 2019-05-06T04:01:34,066Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-86c7a454-eda9-4b7b-8c5d-c28b8fc8384e.jar {}
[INFO ] 2019-05-06T04:01:34,090Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-99fbbe9c-96ec-4441-bf2a-38a8cb1249db.jar {}
[INFO ] 2019-05-06T04:01:34,125Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-a4b72c38-c089-4d66-96ed-dc9587890094.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-86c7a454-eda9-4b7b-8c5d-c28b8fc8384e.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-99fbbe9c-96ec-4441-bf2a-38a8cb1249db.jar, rootPackageName=null) {}
[INFO ] 2019-05-06T04:01:34,163Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T04:01:34,166Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T04:01:34,183Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-a4b72c38-c089-4d66-96ed-dc9587890094.jar {}
[INFO ] 2019-05-06T04:01:34,214Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-86c7a454-eda9-4b7b-8c5d-c28b8fc8384e.jar {}
[INFO ] 2019-05-06T04:01:34,239Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-99fbbe9c-96ec-4441-bf2a-38a8cb1249db.jar {}
[INFO ] 2019-05-06T04:01:34,402Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@640028f2 {}
[INFO ] 2019-05-06T04:01:35,205Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T04:01:35,255Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:01:35,260Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:01:37,247Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:01:37,839Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T04:01:37,842Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:37,865Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:37,986Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:37,989Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:38,181Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T04:01:38,190Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-06T04:01:38,292Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-05-06T04:01:38,517Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 17B47052DE21E922A98068E11975C4FDC3A5EE6442812D75542D3FF75560DA1E, not inserting the second time {}
[INFO ] 2019-05-06T04:01:38,591Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:38,617Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:01:38,620Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:38,622Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:38,624Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:01:38,626Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:38,631Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T04:01:38,632Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T04:01:38,654Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-06T04:01:38,666Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@354aaf03 {}
[INFO ] 2019-05-06T04:01:38,678Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T04:01:38,680Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:01:38,682Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:01:38,882Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:01:38,895Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T04:01:38,897Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:38,906Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:38,916Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:38,919Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:38,981Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T04:01:38,983Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-06T04:01:39,010Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 04DE1F77CB23D73C1D097BBC8B80AFF09E817F953DD7C00EA9A9C0478A79130F, not inserting the second time {}
[INFO ] 2019-05-06T04:01:39,019Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:39,023Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:39,035Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:39,037Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:39,040Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:39,055Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:39,061Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:39,073Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:01:39,076Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:39,077Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:39,083Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:01:39,087Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:39,092Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T04:01:39,097Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T04:01:39,134Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-06T04:01:39,149Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6b6477fb {}
[INFO ] 2019-05-06T04:01:39,167Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T04:01:39,170Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:01:39,171Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:01:39,299Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:01:39,323Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T04:01:39,325Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:39,338Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:39,348Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:39,350Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:39,419Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T04:01:39,422Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-06T04:01:39,441Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 83D3D3B6BDDE88A81A95AA11160102DAA9F6FD9B9D110B3C6EF659377C3327A8, not inserting the second time {}
[INFO ] 2019-05-06T04:01:39,450Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:39,453Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:39,464Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:39,466Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:39,468Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:39,479Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:39,480Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:39,483Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:39,493Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:39,495Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:39,498Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:39,515Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:39,517Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:39,527Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:01:39,529Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:39,532Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:39,537Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:01:39,538Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:39,543Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T04:01:39,545Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T04:01:39,576Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-06T04:01:39,593Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@45188301 {}
[INFO ] 2019-05-06T04:01:39,610Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T04:01:39,616Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:01:39,620Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:01:39,905Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:01:39,922Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T04:01:39,926Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:39,935Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:39,941Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:39,943Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:39,994Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T04:01:39,996Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-06T04:01:40,015Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 325AF77C44246B579A5276450D04FB089B7829B3875CA8C13ABAB073DFC99AC8, not inserting the second time {}
[INFO ] 2019-05-06T04:01:40,022Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:40,025Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:40,037Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115297842) {}
[INFO ] 2019-05-06T04:01:40,039Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:40,042Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:40,055Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:40,056Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:40,059Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:40,069Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115298897) {}
[INFO ] 2019-05-06T04:01:40,071Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:40,073Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:40,084Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:40,086Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:40,091Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:40,105Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115299325) {}
[INFO ] 2019-05-06T04:01:40,108Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:40,115Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:01:40,129Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:40,135Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:40,144Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:01:40,146Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:40,153Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:40,155Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:01:40,157Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115299926) {}
[INFO ] 2019-05-06T04:01:40,183Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-06T04:01:40,186Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-06T04:01:40,189Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-06T04:01:41,039Z [Mock network] flow.[daab458c-c89e-4fc2-bf35-0ebca59052f5].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8418647021674823547). {}
[INFO ] 2019-05-06T04:01:41,204Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8418647021674823547). {invocation_id=ce58b01f-d857-4cf9-9057-2904e5cd4702, invocation_timestamp=2019-05-06T04:01:41.197Z, session_id=ce58b01f-d857-4cf9-9057-2904e5cd4702, session_timestamp=2019-05-06T04:01:41.197Z}
[INFO ] 2019-05-06T04:01:41,439Z [Mock network] flow.[daab458c-c89e-4fc2-bf35-0ebca59052f5].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-224969502645287589). {}
[INFO ] 2019-05-06T04:01:41,469Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-224969502645287589). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=c9099abf-10e8-40b1-af83-cd79745a747f, invocation_timestamp=2019-05-06T04:01:41.468Z, session_id=c9099abf-10e8-40b1-af83-cd79745a747f, session_timestamp=2019-05-06T04:01:41.468Z}
[INFO ] 2019-05-06T04:01:41,539Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.LinearState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-05-06T04:01:41,573Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.FungibleAsset, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-05-06T04:04:10,841Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-0fab5757-aca9-4e50-a199-2084ac5fb9f9.jar {}
[INFO ] 2019-05-06T04:04:10,890Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-01255957-ce93-4cd1-9074-be564c8d51ab.jar {}
[INFO ] 2019-05-06T04:04:10,915Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-89576226-15de-43be-8949-0a16ba779a94.jar {}
[INFO ] 2019-05-06T04:04:10,938Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-0fab5757-aca9-4e50-a199-2084ac5fb9f9.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-01255957-ce93-4cd1-9074-be564c8d51ab.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-89576226-15de-43be-8949-0a16ba779a94.jar, rootPackageName=null) {}
[INFO ] 2019-05-06T04:04:10,968Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T04:04:10,972Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T04:04:10,988Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-0fab5757-aca9-4e50-a199-2084ac5fb9f9.jar {}
[INFO ] 2019-05-06T04:04:11,018Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-01255957-ce93-4cd1-9074-be564c8d51ab.jar {}
[INFO ] 2019-05-06T04:04:11,043Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-89576226-15de-43be-8949-0a16ba779a94.jar {}
[INFO ] 2019-05-06T04:04:11,180Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@640028f2 {}
[INFO ] 2019-05-06T04:04:11,996Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T04:04:12,055Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:04:12,063Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:04:14,215Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:04:14,748Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T04:04:14,750Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:14,763Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:14,887Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:14,889Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:15,068Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T04:04:15,075Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-06T04:04:15,176Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-05-06T04:04:15,394Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 804D7F1E6939B496371AD06F40C5D18F12EA650D2089FE040C43F01EC6BD0A83, not inserting the second time {}
[INFO ] 2019-05-06T04:04:15,463Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:15,488Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:04:15,489Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:15,493Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:15,498Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:04:15,500Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:15,505Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T04:04:15,506Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T04:04:15,529Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-06T04:04:15,541Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6b7945e1 {}
[INFO ] 2019-05-06T04:04:15,554Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T04:04:15,557Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:04:15,559Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:04:15,750Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:04:15,761Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T04:04:15,764Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:15,769Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:15,775Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:15,777Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:15,837Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T04:04:15,839Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-06T04:04:15,866Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B3667728A0ABB846046EBFF83248D98FADB911A0F98AA41D45A85F4F30F8ECA0, not inserting the second time {}
[INFO ] 2019-05-06T04:04:15,874Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:15,879Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:15,891Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:15,893Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:15,896Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:15,912Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:15,914Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:15,921Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:04:15,926Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:15,928Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:15,930Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:04:15,934Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:15,938Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T04:04:15,940Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T04:04:15,973Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-06T04:04:15,989Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@50fc62e0 {}
[INFO ] 2019-05-06T04:04:16,010Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T04:04:16,019Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:04:16,021Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:04:16,164Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:04:16,183Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T04:04:16,185Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,196Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:16,204Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,208Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,274Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T04:04:16,277Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-06T04:04:16,296Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 35EDF6C5AAE26012A12F8F422AD4A1786157F7E721B081F6ACFFB3CF7490930D, not inserting the second time {}
[INFO ] 2019-05-06T04:04:16,305Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:16,312Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:16,324Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:16,326Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,331Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:16,342Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,344Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:16,347Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:16,358Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:16,359Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,361Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:16,371Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,372Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,380Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:04:16,381Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,385Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,386Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:04:16,388Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,392Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T04:04:16,393Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T04:04:16,426Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-06T04:04:16,440Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@24b73741 {}
[INFO ] 2019-05-06T04:04:16,457Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T04:04:16,460Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:04:16,463Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:04:16,582Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:04:16,605Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T04:04:16,608Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,616Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:16,632Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,635Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,698Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T04:04:16,700Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-06T04:04:16,721Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C557EA5955C0A9FC1CB7A57149109225D8B61D8A63ED4EF1805E08FE30D18318, not inserting the second time {}
[INFO ] 2019-05-06T04:04:16,731Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:16,734Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:16,742Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115454750) {}
[INFO ] 2019-05-06T04:04:16,744Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,747Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:16,757Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,758Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:16,761Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:16,770Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115455764) {}
[INFO ] 2019-05-06T04:04:16,772Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,774Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:16,781Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,783Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,785Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:16,795Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115456185) {}
[INFO ] 2019-05-06T04:04:16,796Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,799Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:04:16,815Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,819Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,828Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:04:16,831Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,833Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,835Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:04:16,836Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115456608) {}
[INFO ] 2019-05-06T04:04:16,873Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-06T04:04:16,875Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-06T04:04:16,876Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-06T04:04:17,823Z [Mock network] flow.[69417e9e-bc8a-4b81-b792-8d57311785fa].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5051685830178322205). {}
[INFO ] 2019-05-06T04:04:17,983Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5051685830178322205). {invocation_id=54a9c632-4ebe-45eb-8449-8c8e90afd135, invocation_timestamp=2019-05-06T04:04:17.975Z, session_id=54a9c632-4ebe-45eb-8449-8c8e90afd135, session_timestamp=2019-05-06T04:04:17.975Z}
[INFO ] 2019-05-06T04:04:18,231Z [Mock network] flow.[69417e9e-bc8a-4b81-b792-8d57311785fa].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1547028720805065070). {}
[INFO ] 2019-05-06T04:04:18,257Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1547028720805065070). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=8311b958-93b4-4db9-a1c5-05d8dc89c6e4, invocation_timestamp=2019-05-06T04:04:18.256Z, session_id=8311b958-93b4-4db9-a1c5-05d8dc89c6e4, session_timestamp=2019-05-06T04:04:18.256Z}
[INFO ] 2019-05-06T04:04:18,338Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.BondState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-05-06T04:04:18,375Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.FungibleAsset, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-05-06T04:05:05,120Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-ac0b75be-9a90-46eb-9dac-653753fc2e4e.jar {}
[INFO ] 2019-05-06T04:05:05,165Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-047e8b63-6150-4630-9c49-8dbfc2f9858b.jar {}
[INFO ] 2019-05-06T04:05:05,182Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-77663402-968f-45af-a7dd-3a93b014adfd.jar {}
[INFO ] 2019-05-06T04:05:05,206Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ac0b75be-9a90-46eb-9dac-653753fc2e4e.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-047e8b63-6150-4630-9c49-8dbfc2f9858b.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-77663402-968f-45af-a7dd-3a93b014adfd.jar, rootPackageName=null) {}
[INFO ] 2019-05-06T04:05:05,236Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T04:05:05,240Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T04:05:05,256Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ac0b75be-9a90-46eb-9dac-653753fc2e4e.jar {}
[INFO ] 2019-05-06T04:05:05,289Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-047e8b63-6150-4630-9c49-8dbfc2f9858b.jar {}
[INFO ] 2019-05-06T04:05:05,309Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-77663402-968f-45af-a7dd-3a93b014adfd.jar {}
[INFO ] 2019-05-06T04:05:05,472Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7be3a837 {}
[INFO ] 2019-05-06T04:05:06,254Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T04:05:06,299Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:05:06,307Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:05:08,260Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:05:08,796Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T04:05:08,799Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:08,812Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:08,927Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:08,930Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:09,115Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T04:05:09,121Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-06T04:05:09,220Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-05-06T04:05:09,423Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 23C2B66CDE4E25695E3F8D1DF13C65B795760BEAE446E2DDF52DDD7C404FC1BD, not inserting the second time {}
[INFO ] 2019-05-06T04:05:09,501Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:09,532Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:05:09,535Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:09,536Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:09,539Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:05:09,541Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:09,546Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T04:05:09,548Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T04:05:09,577Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-06T04:05:09,591Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5bd8b901 {}
[INFO ] 2019-05-06T04:05:09,605Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T04:05:09,608Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:05:09,611Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:05:09,801Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:05:09,811Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T04:05:09,813Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:09,819Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:09,826Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:09,827Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:09,904Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T04:05:09,907Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-06T04:05:09,939Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key DDA7EEB864D6BCAF0AD53C6C1F1CFA9A6FD7A32CC5B3B22A1C4785D91E975D12, not inserting the second time {}
[INFO ] 2019-05-06T04:05:09,950Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:09,955Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:09,967Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:09,969Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:09,972Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:09,986Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:09,989Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:09,996Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:05:09,997Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:09,999Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:10,004Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:05:10,005Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:10,009Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T04:05:10,011Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T04:05:10,034Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-06T04:05:10,045Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@12445241 {}
[INFO ] 2019-05-06T04:05:10,057Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T04:05:10,059Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:05:10,061Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:05:10,250Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:05:10,262Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T04:05:10,264Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:10,270Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:10,278Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:10,279Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:10,342Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T04:05:10,344Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-06T04:05:10,368Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F05E2CD2C3B00786C8B25B6779476A9BF35DBF2A5662357320B7B045A002B987, not inserting the second time {}
[INFO ] 2019-05-06T04:05:10,377Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:10,380Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:10,398Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:10,400Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:10,402Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:10,414Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:10,416Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:10,420Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:10,480Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:10,494Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:10,500Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:10,529Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:10,531Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:10,537Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:05:10,539Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:10,540Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:10,541Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:05:10,542Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:10,546Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-06T04:05:10,549Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-06T04:05:10,568Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-06T04:05:10,585Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@63d93e91 {}
[INFO ] 2019-05-06T04:05:10,600Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-06T04:05:10,602Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:05:10,607Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:05:10,988Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-06T04:05:11,030Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-06T04:05:11,033Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,038Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:11,044Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,046Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,101Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment D954F8F0073BCE1313DF2098C857BD75954E5BD11E13CD99D4251F00127204DA {}
[WARN ] 2019-05-06T04:05:11,103Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-06T04:05:11,122Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0DE296E9144C1825D91997C2C4153DE327AC049EEDC9C9CC19296488D295B883, not inserting the second time {}
[INFO ] 2019-05-06T04:05:11,128Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:11,131Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:11,146Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1557115508799) {}
[INFO ] 2019-05-06T04:05:11,147Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,149Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:11,160Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,162Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:11,164Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:11,173Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1557115509813) {}
[INFO ] 2019-05-06T04:05:11,175Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,177Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:11,187Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,188Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:11,190Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:11,201Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1557115510264) {}
[INFO ] 2019-05-06T04:05:11,203Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,206Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-06T04:05:11,216Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,218Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,222Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:05:11,224Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,225Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,227Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-06T04:05:11,228Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1557115511033) {}
[INFO ] 2019-05-06T04:05:11,252Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-06T04:05:11,254Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-06T04:05:11,256Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-06T04:05:12,089Z [Mock network] flow.[636372ff-73ce-4a2d-8250-f10a31ab8b1d].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8846646658365742500). {}
[INFO ] 2019-05-06T04:05:12,240Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8846646658365742500). {invocation_id=41a91cfe-4345-4523-a7f3-c4a493728e0a, invocation_timestamp=2019-05-06T04:05:12.233Z, session_id=41a91cfe-4345-4523-a7f3-c4a493728e0a, session_timestamp=2019-05-06T04:05:12.233Z}
[INFO ] 2019-05-06T04:05:12,486Z [Mock network] flow.[636372ff-73ce-4a2d-8250-f10a31ab8b1d].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-465392614378965778). {}
[INFO ] 2019-05-06T04:05:12,514Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-465392614378965778). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=da8526e2-9f6f-453b-ab69-2e062a5b11be, invocation_timestamp=2019-05-06T04:05:12.513Z, session_id=da8526e2-9f6f-453b-ab69-2e062a5b11be, session_timestamp=2019-05-06T04:05:12.513Z}
[INFO ] 2019-05-06T04:05:12,592Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.BondState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-05-06T04:05:12,632Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.FungibleAsset, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
