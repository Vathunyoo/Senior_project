[INFO ] 2019-04-26T02:44:27,724Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: /Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ee9ea038-e6a9-4ba5-8498-7748d0a81ae2.jar {}
[INFO ] 2019-04-26T02:44:27,764Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-09d6bcbf-08fd-4b03-8b2d-e85e893246cb.jar {}
[INFO ] 2019-04-26T02:44:27,774Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-b7d6357f-9872-494c-8c9d-9d22de4ec70f.jar {}
[INFO ] 2019-04-26T02:44:27,790Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ee9ea038-e6a9-4ba5-8498-7748d0a81ae2.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-09d6bcbf-08fd-4b03-8b2d-e85e893246cb.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-b7d6357f-9872-494c-8c9d-9d22de4ec70f.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T02:44:27,807Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:44:27,810Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:44:27,822Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ee9ea038-e6a9-4ba5-8498-7748d0a81ae2.jar {}
[INFO ] 2019-04-26T02:44:27,853Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-09d6bcbf-08fd-4b03-8b2d-e85e893246cb.jar {}
[INFO ] 2019-04-26T02:44:27,862Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-b7d6357f-9872-494c-8c9d-9d22de4ec70f.jar {}
[INFO ] 2019-04-26T02:44:27,925Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@ab24484 {}
[INFO ] 2019-04-26T02:44:28,363Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:44:28,389Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:44:28,394Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:44:29,620Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:44:29,840Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:44:29,843Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246669843) {}
[INFO ] 2019-04-26T02:44:29,854Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:44:29,925Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246669843) {}
[INFO ] 2019-04-26T02:44:29,927Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246669843) {}
[INFO ] 2019-04-26T02:44:30,076Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[WARN ] 2019-04-26T02:44:30,081Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T02:44:30,140Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T02:44:30,234Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 4B8B55BF8F4FBCC5CE2F6891B0EFC5DC5AA6AEF1DE830A2CAA281852839C53F8, not inserting the second time {}
[INFO ] 2019-04-26T02:45:13,398Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-15443678-8f18-4905-bdc6-8efee8f4a736.jar {}
[INFO ] 2019-04-26T02:45:13,438Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-7733fe20-f19f-4c84-9ea4-71ca969bf99d.jar {}
[INFO ] 2019-04-26T02:45:13,447Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-8bcfbeaa-7436-451d-8a0f-a9a6c976bd05.jar {}
[INFO ] 2019-04-26T02:45:13,476Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-15443678-8f18-4905-bdc6-8efee8f4a736.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-7733fe20-f19f-4c84-9ea4-71ca969bf99d.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-8bcfbeaa-7436-451d-8a0f-a9a6c976bd05.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T02:45:13,508Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:45:13,511Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:45:13,527Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-15443678-8f18-4905-bdc6-8efee8f4a736.jar {}
[INFO ] 2019-04-26T02:45:13,558Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-7733fe20-f19f-4c84-9ea4-71ca969bf99d.jar {}
[INFO ] 2019-04-26T02:45:13,596Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-8bcfbeaa-7436-451d-8a0f-a9a6c976bd05.jar {}
[INFO ] 2019-04-26T02:45:13,772Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4b8601a1 {}
[INFO ] 2019-04-26T02:45:14,515Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:45:14,557Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:45:14,562Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:45:16,552Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:45:17,095Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:45:17,097Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:17,110Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:17,222Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:17,224Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:17,402Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[WARN ] 2019-04-26T02:45:17,409Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T02:45:17,515Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T02:45:17,743Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0F62C25E0DC433B5D6D62F7267E855BB23EBA137BE3BD9DD8954DFCA9D23B524, not inserting the second time {}
[INFO ] 2019-04-26T02:45:17,818Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:17,843Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:45:17,845Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:17,847Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:17,851Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:45:17,853Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:17,858Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:45:17,860Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:45:17,885Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:45:17,898Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3890c4da {}
[INFO ] 2019-04-26T02:45:17,912Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:45:17,914Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:45:17,916Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:45:18,105Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:45:18,117Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:45:18,119Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:18,124Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:18,130Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:18,132Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:18,209Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[WARN ] 2019-04-26T02:45:18,212Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:45:18,233Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D2E5BD5D52D9A4E29EACF2929051CB8E6AAC7CC0BF5B44D16D0C23F64BE3F4B0, not inserting the second time {}
[INFO ] 2019-04-26T02:45:18,240Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:18,245Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:18,257Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:18,258Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:18,262Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:18,275Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:18,277Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:18,289Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:45:18,293Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:18,295Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:18,300Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:45:18,302Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:18,308Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:45:18,310Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:45:18,339Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:45:18,353Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@165348d0 {}
[INFO ] 2019-04-26T02:45:18,368Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:45:18,372Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:45:18,374Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:45:18,507Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:45:18,522Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:45:18,526Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:18,532Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:18,543Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:18,544Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:18,612Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[WARN ] 2019-04-26T02:45:18,615Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:45:18,636Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 40CC63C12DBC0E5ABBC1C429EFB555ABDE1C2B15304BF3E9599A217941F0B805, not inserting the second time {}
[INFO ] 2019-04-26T02:45:18,644Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:18,648Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:18,662Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:18,664Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:18,666Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:18,677Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:18,679Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:18,681Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:18,695Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:18,697Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:18,702Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:18,716Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:18,719Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:18,726Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:45:18,727Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:18,729Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:18,731Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:45:18,735Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:18,738Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:45:18,739Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:45:18,762Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:45:18,777Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4840e7 {}
[INFO ] 2019-04-26T02:45:18,797Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:45:18,800Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:45:18,803Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:45:19,126Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:45:19,142Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:45:19,145Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,150Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:19,158Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,161Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,225Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[WARN ] 2019-04-26T02:45:19,227Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:45:19,247Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C7C199381597E48A7468B071B350C8B74AC68D4FC921294051062FE5C19A8159, not inserting the second time {}
[INFO ] 2019-04-26T02:45:19,255Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:19,258Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:19,267Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556246717097) {}
[INFO ] 2019-04-26T02:45:19,269Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,273Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:19,285Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,288Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:19,291Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:19,305Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556246718118) {}
[INFO ] 2019-04-26T02:45:19,307Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,310Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:19,320Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,322Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:19,325Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:19,334Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556246718526) {}
[INFO ] 2019-04-26T02:45:19,340Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,345Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:45:19,358Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,360Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,368Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:45:19,370Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,373Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,375Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:45:19,380Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556246719145) {}
[INFO ] 2019-04-26T02:45:19,410Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:45:19,412Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:45:20,271Z [Mock network] flow.[1c518d36-6296-4c67-af3d-bd9688271a8d].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-359103296739175557). {}
[INFO ] 2019-04-26T02:45:20,413Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-359103296739175557). {invocation_id=968c8191-5dad-47f6-9c33-eea0109581bf, invocation_timestamp=2019-04-26T02:45:20.405Z, session_id=968c8191-5dad-47f6-9c33-eea0109581bf, session_timestamp=2019-04-26T02:45:20.405Z}
[INFO ] 2019-04-26T02:45:20,672Z [Mock network] flow.[1c518d36-6296-4c67-af3d-bd9688271a8d].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=6925144361481676125). {}
[INFO ] 2019-04-26T02:45:20,697Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=6925144361481676125). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=189e85bc-fd95-4a29-9500-cd1f585b64b9, invocation_timestamp=2019-04-26T02:45:20.697Z, session_id=189e85bc-fd95-4a29-9500-cd1f585b64b9, session_timestamp=2019-04-26T02:45:20.697Z}
[INFO ] 2019-04-26T02:45:20,768Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-26T02:50:23,683Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-4cf1a940-a02e-44f8-9a45-57d98d658824.jar {}
[INFO ] 2019-04-26T02:50:23,722Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-8efb9966-9c08-4ee5-afe7-837747799e07.jar {}
[INFO ] 2019-04-26T02:50:23,731Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-2b76ecec-e529-4154-a2da-7567d2f5eabe.jar {}
[INFO ] 2019-04-26T02:50:23,756Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-4cf1a940-a02e-44f8-9a45-57d98d658824.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-8efb9966-9c08-4ee5-afe7-837747799e07.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-2b76ecec-e529-4154-a2da-7567d2f5eabe.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T02:50:23,789Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:50:23,793Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:50:23,805Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-4cf1a940-a02e-44f8-9a45-57d98d658824.jar {}
[INFO ] 2019-04-26T02:50:23,837Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-8efb9966-9c08-4ee5-afe7-837747799e07.jar {}
[INFO ] 2019-04-26T02:50:23,863Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-2b76ecec-e529-4154-a2da-7567d2f5eabe.jar {}
[INFO ] 2019-04-26T02:50:23,991Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3f7a7ce6 {}
[INFO ] 2019-04-26T02:50:24,732Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:50:24,778Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:50:24,783Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:50:26,890Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:50:27,419Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:50:27,420Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:27,432Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:27,547Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:27,549Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:27,746Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[WARN ] 2019-04-26T02:50:27,756Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T02:50:27,869Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T02:50:28,103Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A610F167604F39054D16A41EFE82126D5B9DE6CF88015B9D1B6BEF7E674AD607, not inserting the second time {}
[INFO ] 2019-04-26T02:50:28,174Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:28,203Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:50:28,206Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:28,207Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:28,209Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:50:28,211Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:28,216Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:50:28,218Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:50:28,239Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:50:28,250Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5c1a728 {}
[INFO ] 2019-04-26T02:50:28,265Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:50:28,268Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:50:28,272Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:50:28,439Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:50:28,449Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:50:28,452Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:28,457Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:28,464Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:28,466Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:28,526Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[WARN ] 2019-04-26T02:50:28,528Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:50:28,546Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F48A6DE5EF59FB156E807511FD82CB95E778440C234F8D7686DCC04188003C00, not inserting the second time {}
[INFO ] 2019-04-26T02:50:28,555Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:28,559Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:28,571Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:28,573Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:28,576Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:28,587Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:28,592Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:28,604Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:50:28,609Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:28,614Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:28,616Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:50:28,619Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:28,625Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:50:28,627Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:50:28,652Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:50:28,666Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@52076187 {}
[INFO ] 2019-04-26T02:50:28,685Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:50:28,691Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:50:28,696Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:50:28,816Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:50:28,831Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:50:28,834Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:28,841Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:28,850Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:28,853Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:28,919Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[WARN ] 2019-04-26T02:50:28,921Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:50:28,944Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AA5073BE48FF58CB6C76CE0BABC35EE77A84AE6BA7597DE0EDF0A75E35DFB18F, not inserting the second time {}
[INFO ] 2019-04-26T02:50:28,954Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:28,957Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:28,972Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:28,973Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:28,976Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:28,987Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:28,988Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:28,991Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:29,019Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:29,021Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:29,025Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:29,037Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:29,041Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:29,046Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:50:29,049Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:29,053Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:29,054Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:50:29,057Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:29,061Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:50:29,063Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:50:29,086Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T02:50:29,103Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@64d347b0 {}
[INFO ] 2019-04-26T02:50:29,117Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:50:29,119Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:50:29,121Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:50:29,237Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:50:29,263Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:50:29,267Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,277Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:29,287Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,291Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,355Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5632C89C3E4140C3BD5DC8C0BF86D793388DFF83EFC087974BF2CA1A393FBF0D {}
[WARN ] 2019-04-26T02:50:29,358Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T02:50:29,375Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 161F5F0E96F87ECCAEAF5D8E184A0A0B536C58446B9996C1991B82B597EE7F86, not inserting the second time {}
[INFO ] 2019-04-26T02:50:29,381Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:29,385Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:29,394Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247027420) {}
[INFO ] 2019-04-26T02:50:29,396Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,401Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:29,415Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,417Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:29,420Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:29,430Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247028451) {}
[INFO ] 2019-04-26T02:50:29,432Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,434Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:29,442Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,444Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:29,447Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:29,460Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247028834) {}
[INFO ] 2019-04-26T02:50:29,463Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,465Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:50:29,479Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,481Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,488Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:50:29,491Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,493Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,497Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T02:50:29,499Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247029267) {}
[INFO ] 2019-04-26T02:50:29,525Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:50:29,527Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:50:29,529Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T02:50:30,407Z [Mock network] flow.[8026d36e-01bc-4e01-be5f-aeebf5199a9e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6913409554742342019). {}
[INFO ] 2019-04-26T02:50:30,575Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Borrower, L=Bangkae, C=GB. Session id for tracing purposes is SessionId(toLong=-6913409554742342019). {invocation_id=fa876485-0b58-49f8-88a0-135a9a1d8a51, invocation_timestamp=2019-04-26T02:50:30.566Z, session_id=fa876485-0b58-49f8-88a0-135a9a1d8a51, session_timestamp=2019-04-26T02:50:30.566Z}
[INFO ] 2019-04-26T02:50:30,816Z [Mock network] flow.[8026d36e-01bc-4e01-be5f-aeebf5199a9e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7153579795882792684). {}
[INFO ] 2019-04-26T02:50:30,842Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Borrower, L=Bangkae, C=GB. Session id for tracing purposes is SessionId(toLong=-7153579795882792684). {actor_id=Only For Testing, actor_owningIdentity=O=Borrower, L=Bangkae, C=GB, actor_store_id=TEST, invocation_id=b394a195-1c95-4dc0-a72f-62caf79cb3de, invocation_timestamp=2019-04-26T02:50:30.840Z, session_id=b394a195-1c95-4dc0-a72f-62caf79cb3de, session_timestamp=2019-04-26T02:50:30.840Z}
[INFO ] 2019-04-26T02:50:30,920Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-26T02:59:18,705Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-8d9bc634-6359-4336-8b63-a241c98854d1.jar {}
[INFO ] 2019-04-26T02:59:18,748Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-9e9f897f-d3b3-4565-968f-2898d33d95b5.jar {}
[INFO ] 2019-04-26T02:59:18,764Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-ac3fe182-2461-4bc7-b0f2-fafe5e444c71.jar {}
[INFO ] 2019-04-26T02:59:18,782Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-8d9bc634-6359-4336-8b63-a241c98854d1.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-9e9f897f-d3b3-4565-968f-2898d33d95b5.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-ac3fe182-2461-4bc7-b0f2-fafe5e444c71.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T02:59:18,804Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T02:59:18,808Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T02:59:18,818Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-8d9bc634-6359-4336-8b63-a241c98854d1.jar {}
[INFO ] 2019-04-26T02:59:18,851Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-9e9f897f-d3b3-4565-968f-2898d33d95b5.jar {}
[INFO ] 2019-04-26T02:59:18,877Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-ac3fe182-2461-4bc7-b0f2-fafe5e444c71.jar {}
[INFO ] 2019-04-26T02:59:18,978Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@662e682a {}
[INFO ] 2019-04-26T02:59:19,447Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T02:59:19,489Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:59:19,497Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:59:20,935Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T02:59:21,204Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T02:59:21,206Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247561206) {}
[INFO ] 2019-04-26T02:59:21,217Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T02:59:21,318Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247561206) {}
[INFO ] 2019-04-26T02:59:21,320Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247561206) {}
[INFO ] 2019-04-26T02:59:21,468Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T02:59:21,473Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T02:59:21,526Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T02:59:21,637Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E3BE50B8B5016081F0B7FB064A51A4802C3406FFBE724F2F8510C7D700F705DD, not inserting the second time {}
[INFO ] 2019-04-26T03:00:02,435Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-8f662b0a-46ef-434c-af60-698e88db9bad.jar {}
[INFO ] 2019-04-26T03:00:02,478Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-fc7f0efd-6808-47a3-a6ca-5d118e287963.jar {}
[INFO ] 2019-04-26T03:00:02,494Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-d26b8b67-e7c4-47d2-912c-fab9faaa5c86.jar {}
[INFO ] 2019-04-26T03:00:02,517Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-8f662b0a-46ef-434c-af60-698e88db9bad.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-fc7f0efd-6808-47a3-a6ca-5d118e287963.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-d26b8b67-e7c4-47d2-912c-fab9faaa5c86.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:00:02,549Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:00:02,552Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:00:02,566Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-8f662b0a-46ef-434c-af60-698e88db9bad.jar {}
[INFO ] 2019-04-26T03:00:02,600Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-fc7f0efd-6808-47a3-a6ca-5d118e287963.jar {}
[INFO ] 2019-04-26T03:00:02,626Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-d26b8b67-e7c4-47d2-912c-fab9faaa5c86.jar {}
[INFO ] 2019-04-26T03:00:02,787Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@640028f2 {}
[INFO ] 2019-04-26T03:00:03,601Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:00:03,647Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:00:03,654Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:00:06,005Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:00:06,541Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:00:06,547Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:06,560Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:06,665Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:06,668Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:06,866Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:00:06,874Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:00:06,986Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:00:07,225Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 28768E5BD13724F1AB8F09AD62F506C936DB0CE21C7F7A94309F29B60C5C8476, not inserting the second time {}
[INFO ] 2019-04-26T03:00:07,309Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:07,334Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:00:07,336Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:07,338Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:07,341Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:00:07,345Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:07,350Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:00:07,352Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:00:07,383Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:00:07,398Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5390bdee {}
[INFO ] 2019-04-26T03:00:07,415Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:00:07,417Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:00:07,419Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:00:07,595Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:00:07,605Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:00:07,607Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:07,613Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:07,619Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:07,621Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:07,689Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:00:07,694Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:00:07,724Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 4176AB83DA2ED2A2B8E4F20F55731669A56CCBB189BC58CBBA8C5227168DDF29, not inserting the second time {}
[INFO ] 2019-04-26T03:00:07,736Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:07,740Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:07,756Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:07,758Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:07,763Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:07,775Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:07,776Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:07,782Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:00:07,785Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:07,786Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:07,789Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:00:07,790Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:07,794Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:00:07,796Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:00:07,818Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:00:07,828Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4bafe92f {}
[INFO ] 2019-04-26T03:00:07,850Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:00:07,853Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:00:07,855Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:00:08,030Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:00:08,040Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:00:08,045Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,050Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:08,057Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,059Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,116Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:00:08,118Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:00:08,139Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C7BA1029253A4857546D35D06724885DAD64E9FC3D7A563D66A7FBCF2833901A, not inserting the second time {}
[INFO ] 2019-04-26T03:00:08,148Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:08,151Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:08,166Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:08,170Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,174Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:08,185Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,186Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:08,190Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:08,204Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:08,208Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,213Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:08,230Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,234Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,241Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:00:08,246Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,247Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,248Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:00:08,250Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,256Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:00:08,260Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:00:08,286Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:00:08,299Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@127205ac {}
[INFO ] 2019-04-26T03:00:08,310Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:00:08,312Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:00:08,313Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:00:08,439Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:00:08,466Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:00:08,471Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,479Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:08,490Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,493Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,549Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:00:08,551Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:00:08,576Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 08F2E144B88ED3699F6A8FFE7B5CCB60F5EF056D0883E01399FE4735E0837075, not inserting the second time {}
[INFO ] 2019-04-26T03:00:08,585Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:08,588Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:08,598Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247606547) {}
[INFO ] 2019-04-26T03:00:08,599Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,601Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:08,613Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,615Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:08,618Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:08,633Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556247607607) {}
[INFO ] 2019-04-26T03:00:08,635Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,640Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:08,654Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,657Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,662Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:08,679Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556247608045) {}
[INFO ] 2019-04-26T03:00:08,680Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,683Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:00:08,697Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,699Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,705Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:00:08,707Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,709Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,713Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:00:08,716Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556247608471) {}
[INFO ] 2019-04-26T03:00:08,742Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:00:08,743Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:00:08,745Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:00:09,619Z [Mock network] flow.[f2a311c4-3427-4d11-a54e-2694ccd53bd8].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7818832029953245599). {}
[INFO ] 2019-04-26T03:00:09,764Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Borrower, L=Bangkae, C=GB. Session id for tracing purposes is SessionId(toLong=7818832029953245599). {invocation_id=2d51bc36-13a5-4c21-9a29-a85c6359b98f, invocation_timestamp=2019-04-26T03:00:09.757Z, session_id=2d51bc36-13a5-4c21-9a29-a85c6359b98f, session_timestamp=2019-04-26T03:00:09.757Z}
[INFO ] 2019-04-26T03:00:10,006Z [Mock network] flow.[f2a311c4-3427-4d11-a54e-2694ccd53bd8].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4180529805232002700). {}
[INFO ] 2019-04-26T03:00:10,049Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Borrower, L=Bangkae, C=GB. Session id for tracing purposes is SessionId(toLong=-4180529805232002700). {actor_id=Only For Testing, actor_owningIdentity=O=Borrower, L=Bangkae, C=GB, actor_store_id=TEST, invocation_id=25975616-db44-467b-aced-fc8178d894d6, invocation_timestamp=2019-04-26T03:00:10.048Z, session_id=25975616-db44-467b-aced-fc8178d894d6, session_timestamp=2019-04-26T03:00:10.048Z}
[INFO ] 2019-04-26T03:00:10,132Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-26T03:06:23,972Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-9fb27080-4f5f-403b-8a8c-fa77b7d17897.jar {}
[INFO ] 2019-04-26T03:06:24,091Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-40576896-a25a-4852-b7f5-40387962a185.jar {}
[INFO ] 2019-04-26T03:06:24,114Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-1604b8dc-38b3-4425-9a49-36ba87b7b0b7.jar {}
[INFO ] 2019-04-26T03:06:24,135Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-9fb27080-4f5f-403b-8a8c-fa77b7d17897.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-40576896-a25a-4852-b7f5-40387962a185.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-1604b8dc-38b3-4425-9a49-36ba87b7b0b7.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:06:24,152Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:06:24,157Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:06:24,185Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-9fb27080-4f5f-403b-8a8c-fa77b7d17897.jar {}
[INFO ] 2019-04-26T03:06:24,224Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-40576896-a25a-4852-b7f5-40387962a185.jar {}
[INFO ] 2019-04-26T03:06:24,241Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-1604b8dc-38b3-4425-9a49-36ba87b7b0b7.jar {}
[INFO ] 2019-04-26T03:06:24,328Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2e43c38d {}
[INFO ] 2019-04-26T03:06:24,676Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:06:24,704Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:06:24,710Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:06:25,891Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:06:26,157Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:06:26,161Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247986161) {}
[INFO ] 2019-04-26T03:06:26,175Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:06:26,253Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247986161) {}
[INFO ] 2019-04-26T03:06:26,258Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556247986161) {}
[INFO ] 2019-04-26T03:06:26,394Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:06:26,398Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:06:26,456Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:06:26,568Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FEB7C5D36AD8A9832F7AE402EED9D3D6CF97D754C589FEB30B63106BDE41B25F, not inserting the second time {}
[INFO ] 2019-04-26T03:07:12,697Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-2cd1f421-200a-43f7-932e-eae587873be4.jar {}
[INFO ] 2019-04-26T03:07:12,732Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-142dd85c-30b1-4da3-83c7-2a1e4bc53c89.jar {}
[INFO ] 2019-04-26T03:07:12,749Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-b9b251c2-b9e3-4b8b-93cd-3cd9e9da28ea.jar {}
[INFO ] 2019-04-26T03:07:12,775Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-2cd1f421-200a-43f7-932e-eae587873be4.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-142dd85c-30b1-4da3-83c7-2a1e4bc53c89.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-b9b251c2-b9e3-4b8b-93cd-3cd9e9da28ea.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:07:12,805Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:07:12,808Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:07:12,820Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-2cd1f421-200a-43f7-932e-eae587873be4.jar {}
[INFO ] 2019-04-26T03:07:12,855Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-142dd85c-30b1-4da3-83c7-2a1e4bc53c89.jar {}
[INFO ] 2019-04-26T03:07:12,865Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-b9b251c2-b9e3-4b8b-93cd-3cd9e9da28ea.jar {}
[INFO ] 2019-04-26T03:07:12,989Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7be3a837 {}
[INFO ] 2019-04-26T03:07:13,711Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:07:13,750Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:07:13,756Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:07:15,693Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:07:16,282Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:07:16,284Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:16,297Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:16,405Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:16,409Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:16,604Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:07:16,611Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:07:16,724Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:07:16,933Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8E7FC9FD0CE25C0C88B129560852C57EF8452E17A65D3BD13CAF082F5759DDF0, not inserting the second time {}
[INFO ] 2019-04-26T03:07:17,009Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:17,041Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:07:17,043Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:17,046Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:17,051Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:07:17,054Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:17,060Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:07:17,062Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:07:17,084Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:07:17,099Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5bd8b901 {}
[INFO ] 2019-04-26T03:07:17,114Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:07:17,116Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:07:17,118Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:07:17,293Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:07:17,304Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:07:17,305Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:17,311Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:17,317Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:17,318Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:17,389Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:07:17,391Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:07:17,414Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 04A9B69A7E283DF357EE463A675D8543251B5D50B6F4A9DD4D054E7051EBC174, not inserting the second time {}
[INFO ] 2019-04-26T03:07:17,427Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:17,433Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:17,448Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:17,450Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:17,456Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:17,478Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:17,480Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:17,489Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:07:17,491Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:17,493Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:17,498Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:07:17,499Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:17,506Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:07:17,509Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:07:17,535Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:07:17,549Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@12445241 {}
[INFO ] 2019-04-26T03:07:17,572Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:07:17,577Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:07:17,578Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:07:17,715Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:07:17,729Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:07:17,731Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:17,740Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:17,747Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:17,750Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:17,816Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:07:17,818Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:07:17,837Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 4906C4C10E0BD54BDE555BFA7582F3D0991EE36DB4C46E4F4874725D67239882, not inserting the second time {}
[INFO ] 2019-04-26T03:07:17,846Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:17,849Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:17,859Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:17,861Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:17,865Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:17,877Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:17,879Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:17,881Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:17,892Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:17,893Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:17,896Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:17,907Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:17,908Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:17,913Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:07:17,915Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:17,916Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:17,917Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:07:17,918Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:17,922Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:07:17,924Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:07:17,948Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:07:17,960Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@63d93e91 {}
[INFO ] 2019-04-26T03:07:17,980Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:07:17,984Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:07:17,985Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:07:18,312Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:07:18,333Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:07:18,336Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,340Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:18,347Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,348Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,400Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:07:18,401Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:07:18,422Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FED5B7B33495EE83465A37160C2DE4646E9C125CC86EB71657F108810D9E3292, not inserting the second time {}
[INFO ] 2019-04-26T03:07:18,429Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:18,432Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:18,443Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248036284) {}
[INFO ] 2019-04-26T03:07:18,445Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,447Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:18,458Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,460Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:18,462Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:18,471Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248037305) {}
[INFO ] 2019-04-26T03:07:18,473Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,478Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:18,490Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,491Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:18,493Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:18,507Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248037731) {}
[INFO ] 2019-04-26T03:07:18,508Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,511Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:07:18,524Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,526Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,532Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:07:18,534Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,535Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,538Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:07:18,540Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248038336) {}
[INFO ] 2019-04-26T03:07:18,564Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:07:18,567Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[WARN ] 2019-04-26T03:07:19,314Z [Mock network] flow.[82162ef5-2419-47cc-a84e-6f3d5b07e2a1].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:109) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:81) ~[classes/:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:21) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-04-26T03:09:21,614Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-b95eb298-711e-4902-b5f5-e0b44fcf6836.jar {}
[INFO ] 2019-04-26T03:09:21,652Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-3b5d9bac-ba40-49cc-a71e-aed76727459f.jar {}
[INFO ] 2019-04-26T03:09:21,667Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-21409e83-2237-4508-a282-285be80d4963.jar {}
[INFO ] 2019-04-26T03:09:21,692Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-b95eb298-711e-4902-b5f5-e0b44fcf6836.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3b5d9bac-ba40-49cc-a71e-aed76727459f.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-21409e83-2237-4508-a282-285be80d4963.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:09:21,724Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:09:21,726Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:09:21,740Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-b95eb298-711e-4902-b5f5-e0b44fcf6836.jar {}
[INFO ] 2019-04-26T03:09:21,775Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3b5d9bac-ba40-49cc-a71e-aed76727459f.jar {}
[INFO ] 2019-04-26T03:09:21,806Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-21409e83-2237-4508-a282-285be80d4963.jar {}
[INFO ] 2019-04-26T03:09:21,956Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7be3a837 {}
[INFO ] 2019-04-26T03:09:22,677Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:09:22,726Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:09:22,731Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:09:24,673Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:09:25,217Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:09:25,219Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:25,233Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:25,351Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:25,353Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:25,528Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:09:25,535Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:09:25,646Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:09:25,852Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B0494BD9937793BEFF1E7FED760EEDC30B8571984E43B2E5708B8336382739AD, not inserting the second time {}
[INFO ] 2019-04-26T03:09:25,917Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:25,942Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:09:25,945Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:25,947Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:25,949Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:09:25,950Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:25,957Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:09:25,959Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:09:25,991Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:09:26,004Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5bd8b901 {}
[INFO ] 2019-04-26T03:09:26,031Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:09:26,044Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:09:26,046Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:09:26,221Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:09:26,231Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:09:26,233Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:26,238Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:26,251Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:26,253Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:26,360Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:09:26,367Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:09:26,401Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1F4199F4199CC106921D2241FF4F7A24E7194E0BC6A80AA89AFC390AF3C8B5A1, not inserting the second time {}
[INFO ] 2019-04-26T03:09:26,413Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:26,418Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:26,429Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:26,431Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:26,434Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:26,446Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:26,447Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:26,453Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:09:26,455Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:26,457Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:26,459Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:09:26,461Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:26,464Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:09:26,466Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:09:26,492Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:09:26,506Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@12445241 {}
[INFO ] 2019-04-26T03:09:26,518Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:09:26,522Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:09:26,523Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:09:26,688Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:09:26,700Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:09:26,703Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:26,707Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:26,712Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:26,714Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:26,769Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:09:26,771Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:09:26,796Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FA6DFCBF57E70BD42600303390295FA007EC08DCA0FCA4A825259CBE459DCF15, not inserting the second time {}
[INFO ] 2019-04-26T03:09:26,805Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:26,810Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:26,822Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:26,823Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:26,826Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:26,836Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:26,837Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:26,840Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:26,853Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:26,855Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:26,857Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:26,885Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:26,887Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:26,895Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:09:26,899Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:26,901Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:26,904Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:09:26,905Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:26,908Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:09:26,910Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:09:26,936Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:09:26,951Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@a28296e {}
[INFO ] 2019-04-26T03:09:26,967Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:09:26,969Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:09:26,971Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:09:27,310Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:09:27,326Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:09:27,328Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,335Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:27,342Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,344Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,395Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:09:27,398Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:09:27,418Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 7FC13B0F63A641CD89863BB3035C316028FB3A73BA3B83D0A3EAD6BD900F3A45, not inserting the second time {}
[INFO ] 2019-04-26T03:09:27,425Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:27,427Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:27,438Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556248165219) {}
[INFO ] 2019-04-26T03:09:27,439Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,442Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:27,453Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,454Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:27,457Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:27,466Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556248166233) {}
[INFO ] 2019-04-26T03:09:27,469Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,471Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:27,480Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,482Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:27,484Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:27,500Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556248166702) {}
[INFO ] 2019-04-26T03:09:27,502Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,505Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:09:27,515Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,517Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,522Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:09:27,523Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,525Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,528Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:09:27,530Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556248167328) {}
[INFO ] 2019-04-26T03:09:27,556Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:09:27,558Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:09:27,560Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[WARN ] 2019-04-26T03:09:28,333Z [Mock network] flow.[b54538c2-d169-4d92-b7ff-8cdd0fcd2c45].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:109) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:81) ~[classes/:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:21) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-04-26T03:13:19,800Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-042a4e21-6a69-465f-8f5d-88ad70b07780.jar {}
[INFO ] 2019-04-26T03:13:19,980Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-7e0057c7-0f71-4a00-bd61-fc91c575257a.jar {}
[INFO ] 2019-04-26T03:13:20,004Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-042a4e21-6a69-465f-8f5d-88ad70b07780.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-7e0057c7-0f71-4a00-bd61-fc91c575257a.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:13:20,039Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-042a4e21-6a69-465f-8f5d-88ad70b07780.jar {}
[INFO ] 2019-04-26T03:13:20,116Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-7e0057c7-0f71-4a00-bd61-fc91c575257a.jar {}
[WARN ] 2019-04-26T03:13:20,264Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:13:24,716Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:13:24,827Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:13:24,934Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:18:38,321Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-a2a8b267-157e-40e1-abed-0976e137172a.jar {}
[INFO ] 2019-04-26T03:18:38,515Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-42a294ba-7c73-4ce7-a74b-dba6ed934884.jar {}
[INFO ] 2019-04-26T03:18:38,545Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-a2a8b267-157e-40e1-abed-0976e137172a.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-42a294ba-7c73-4ce7-a74b-dba6ed934884.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:18:38,573Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-a2a8b267-157e-40e1-abed-0976e137172a.jar {}
[INFO ] 2019-04-26T03:18:38,642Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-42a294ba-7c73-4ce7-a74b-dba6ed934884.jar {}
[WARN ] 2019-04-26T03:18:38,787Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:19:49,920Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-0913c7a4-4d73-4966-b4ac-7bcbd927eb02.jar {}
[INFO ] 2019-04-26T03:19:50,117Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-97ea5c23-af04-4133-bd63-4e6a6527c33e.jar {}
[INFO ] 2019-04-26T03:19:50,142Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-0913c7a4-4d73-4966-b4ac-7bcbd927eb02.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-97ea5c23-af04-4133-bd63-4e6a6527c33e.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:19:50,165Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-0913c7a4-4d73-4966-b4ac-7bcbd927eb02.jar {}
[INFO ] 2019-04-26T03:19:50,242Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-97ea5c23-af04-4133-bd63-4e6a6527c33e.jar {}
[WARN ] 2019-04-26T03:19:50,380Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:22:46,467Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-3bfdc0dd-8c0d-4216-9377-32428ac0bc71.jar {}
[INFO ] 2019-04-26T03:22:46,649Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-e3170f2e-c55c-40c7-805e-eb8c4e070867.jar {}
[INFO ] 2019-04-26T03:22:46,676Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3bfdc0dd-8c0d-4216-9377-32428ac0bc71.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e3170f2e-c55c-40c7-805e-eb8c4e070867.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:22:46,708Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3bfdc0dd-8c0d-4216-9377-32428ac0bc71.jar {}
[INFO ] 2019-04-26T03:22:46,781Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e3170f2e-c55c-40c7-805e-eb8c4e070867.jar {}
[WARN ] 2019-04-26T03:22:46,916Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:24:29,040Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-08f8c41a-d7c8-4619-acd6-758a8d79a9cf.jar {}
[INFO ] 2019-04-26T03:24:29,229Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-1c940f92-9386-473e-b039-5c3235e64945.jar {}
[INFO ] 2019-04-26T03:24:29,259Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-08f8c41a-d7c8-4619-acd6-758a8d79a9cf.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-1c940f92-9386-473e-b039-5c3235e64945.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:24:29,294Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-08f8c41a-d7c8-4619-acd6-758a8d79a9cf.jar {}
[INFO ] 2019-04-26T03:24:29,365Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-1c940f92-9386-473e-b039-5c3235e64945.jar {}
[WARN ] 2019-04-26T03:24:29,500Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:25:53,149Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-56137a5c-c71c-415b-95b0-23bd80e5fddb.jar {}
[INFO ] 2019-04-26T03:25:53,319Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-a4985372-dc35-4c7a-a946-72e64dd4915e.jar {}
[INFO ] 2019-04-26T03:25:53,347Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-56137a5c-c71c-415b-95b0-23bd80e5fddb.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-a4985372-dc35-4c7a-a946-72e64dd4915e.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:25:53,374Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-56137a5c-c71c-415b-95b0-23bd80e5fddb.jar {}
[INFO ] 2019-04-26T03:25:53,453Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-a4985372-dc35-4c7a-a946-72e64dd4915e.jar {}
[WARN ] 2019-04-26T03:25:53,597Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:26:59,749Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-5545dbf2-4124-4a9c-8c90-7cdb64aab8ef.jar {}
[INFO ] 2019-04-26T03:26:59,801Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-09f4fc71-7d50-44c8-8b02-32f30dce70ab.jar {}
[INFO ] 2019-04-26T03:26:59,816Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-3f419395-afc4-4b8e-ab61-4e9a9cba5c0b.jar {}
[INFO ] 2019-04-26T03:26:59,839Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-5545dbf2-4124-4a9c-8c90-7cdb64aab8ef.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-09f4fc71-7d50-44c8-8b02-32f30dce70ab.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-3f419395-afc4-4b8e-ab61-4e9a9cba5c0b.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:26:59,877Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:26:59,881Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:26:59,899Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-5545dbf2-4124-4a9c-8c90-7cdb64aab8ef.jar {}
[INFO ] 2019-04-26T03:26:59,940Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-09f4fc71-7d50-44c8-8b02-32f30dce70ab.jar {}
[INFO ] 2019-04-26T03:26:59,963Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-3f419395-afc4-4b8e-ab61-4e9a9cba5c0b.jar {}
[INFO ] 2019-04-26T03:27:00,158Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4193da4d {}
[INFO ] 2019-04-26T03:27:01,026Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:27:01,070Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:27:01,076Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:27:03,230Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:27:03,834Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:27:03,839Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:03,862Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:03,972Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:03,974Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:04,162Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:27:04,170Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:27:04,274Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:27:04,494Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1E57F7E65EAF2ECCCB9E0FA1883BF173FE06B1C791F642D3160A7021B07ED205, not inserting the second time {}
[INFO ] 2019-04-26T03:27:04,573Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:04,598Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:27:04,600Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:04,603Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:04,605Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:27:04,607Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:04,612Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:27:04,614Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:27:04,637Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:27:04,650Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7cfe97db {}
[INFO ] 2019-04-26T03:27:04,666Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:27:04,671Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:27:04,673Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:27:04,844Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:27:04,854Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:27:04,856Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:04,863Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:04,873Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:04,875Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:04,935Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:27:04,937Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:27:04,957Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 23B1BCE10D7396C6F402813A7202450104023E3163E2D3922BBC313F5C56D174, not inserting the second time {}
[INFO ] 2019-04-26T03:27:04,969Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:04,974Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:04,986Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:04,988Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:04,992Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,003Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:05,005Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:05,009Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:27:05,012Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:05,014Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:05,027Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:27:05,029Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:05,036Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:27:05,038Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:27:05,071Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:27:05,088Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ab632d {}
[INFO ] 2019-04-26T03:27:05,108Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:27:05,110Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:27:05,112Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:27:05,245Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:27:05,262Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:27:05,266Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,276Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,285Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,290Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,352Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:27:05,354Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:27:05,377Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 19D543DCCA2C4383CEF8E18DA0ADFC1848A951A991244FB69FD78ADF16EAF4C9, not inserting the second time {}
[INFO ] 2019-04-26T03:27:05,389Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:05,392Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,405Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:05,407Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,409Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,422Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,424Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:05,427Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,437Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:05,439Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,442Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,454Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,457Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,464Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:27:05,468Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,470Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,474Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:27:05,476Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,480Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:27:05,482Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:27:05,510Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:27:05,524Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@713d2fe8 {}
[INFO ] 2019-04-26T03:27:05,539Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:27:05,541Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:27:05,545Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:27:05,660Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:27:05,694Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:27:05,697Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,707Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,719Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,720Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,789Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:27:05,792Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:27:05,810Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 25EC3032EA648CC339CB3E46BE21C3FA50C50686363272A748BD9293C5938436, not inserting the second time {}
[INFO ] 2019-04-26T03:27:05,817Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:05,820Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,829Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249223839) {}
[INFO ] 2019-04-26T03:27:05,831Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,833Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,843Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,844Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:05,847Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,856Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249224856) {}
[INFO ] 2019-04-26T03:27:05,857Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,860Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,870Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,872Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,876Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,893Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249225265) {}
[INFO ] 2019-04-26T03:27:05,894Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,897Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:27:05,911Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,913Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,921Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:27:05,923Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,925Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,927Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:27:05,930Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249225697) {}
[INFO ] 2019-04-26T03:27:05,954Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:27:05,957Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:27:05,959Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[WARN ] 2019-04-26T03:27:06,791Z [Mock network] flow.[f2885f25-2d2d-427d-ac65-0581a9b59076].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:109) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:81) ~[classes/:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:21) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-04-26T03:29:28,716Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-6472581f-e8b3-4c16-a4ea-99210a6e8150.jar {}
[INFO ] 2019-04-26T03:29:28,765Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-56de139d-fa06-42ec-8e36-48d17b6748b3.jar {}
[INFO ] 2019-04-26T03:29:28,780Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-d479731c-462d-4828-8aa2-861a102aa3ef.jar {}
[INFO ] 2019-04-26T03:29:28,805Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-6472581f-e8b3-4c16-a4ea-99210a6e8150.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-56de139d-fa06-42ec-8e36-48d17b6748b3.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-d479731c-462d-4828-8aa2-861a102aa3ef.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:29:28,840Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:29:28,844Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:29:28,861Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-6472581f-e8b3-4c16-a4ea-99210a6e8150.jar {}
[INFO ] 2019-04-26T03:29:28,888Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-56de139d-fa06-42ec-8e36-48d17b6748b3.jar {}
[INFO ] 2019-04-26T03:29:28,908Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-d479731c-462d-4828-8aa2-861a102aa3ef.jar {}
[INFO ] 2019-04-26T03:29:29,074Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@118f39f3 {}
[INFO ] 2019-04-26T03:29:29,776Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:29:29,816Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:29:29,821Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:29:31,924Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:29:32,500Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:29:32,503Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:32,516Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:32,634Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:32,638Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:32,834Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:29:32,841Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:29:32,953Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:29:33,169Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D824737576B069B2A72B7E1C05B79EFB27A7786E19FA1326A0A44FC6F2B13BF2, not inserting the second time {}
[INFO ] 2019-04-26T03:29:33,236Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:33,283Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:29:33,285Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:33,287Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:33,290Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:29:33,292Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:33,298Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:29:33,300Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:29:33,326Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:29:33,340Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7bca7b6c {}
[INFO ] 2019-04-26T03:29:33,357Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:29:33,361Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:29:33,364Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:29:33,551Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:29:33,561Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:29:33,562Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:33,569Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:33,576Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:33,578Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:33,650Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:29:33,652Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:29:33,683Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9926CDEED5CAF9ED33BD3C40BFDE066154AAD1D7EA022151BEE56BE3758405D2, not inserting the second time {}
[INFO ] 2019-04-26T03:29:33,696Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:33,702Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:33,715Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:33,717Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:33,721Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:33,732Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:33,734Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:33,739Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:29:33,741Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:33,743Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:33,745Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:29:33,746Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:33,750Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:29:33,751Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:29:33,771Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:29:33,782Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@17958999 {}
[INFO ] 2019-04-26T03:29:33,799Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:29:33,801Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:29:33,803Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:29:33,956Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:29:33,966Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:29:33,968Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:33,973Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:33,979Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:33,981Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:34,059Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:29:34,061Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:29:34,087Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 2DABB912325C04CCBA6E7D47573C559EA83FB23C0BFCA10E3404C5B8C9C04771, not inserting the second time {}
[INFO ] 2019-04-26T03:29:34,101Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:34,106Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:34,120Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:34,121Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:34,126Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:34,135Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:34,136Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:34,139Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:34,149Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:34,151Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:34,154Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:34,164Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:34,166Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:34,172Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:29:34,173Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:34,175Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:34,176Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:29:34,177Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:34,181Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:29:34,182Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:29:34,203Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:29:34,213Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@59a8891e {}
[INFO ] 2019-04-26T03:29:34,223Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:29:34,225Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:29:34,226Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:29:34,371Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:29:34,389Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:29:34,562Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,568Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:34,575Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,576Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,631Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:29:34,633Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:29:34,652Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 47594035F5A50D347151BFB822618D6346FC0AAFAB665A09BDB7EA723D3F7004, not inserting the second time {}
[INFO ] 2019-04-26T03:29:34,660Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:34,664Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:34,673Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249372502) {}
[INFO ] 2019-04-26T03:29:34,674Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,677Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:34,688Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,689Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:34,691Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:34,701Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249373562) {}
[INFO ] 2019-04-26T03:29:34,703Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,708Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:34,717Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,722Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:34,725Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:34,737Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249373968) {}
[INFO ] 2019-04-26T03:29:34,738Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,741Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:29:34,750Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,752Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,755Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:29:34,757Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,758Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,759Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:29:34,760Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249374562) {}
[INFO ] 2019-04-26T03:29:34,782Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:29:34,785Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:29:34,787Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[WARN ] 2019-04-26T03:29:35,654Z [Mock network] flow.[84080f99-738f-4137-9ac0-dbfec8b64cc2].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:109) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:81) ~[classes/:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:21) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-04-26T03:30:38,848Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-ecb564f1-83fb-4b4c-9176-9c862e3cd417.jar {}
[INFO ] 2019-04-26T03:30:38,893Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-04554c43-68e7-4c1d-840b-dd2671933141.jar {}
[INFO ] 2019-04-26T03:30:38,907Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-6e25f622-100f-43eb-b2ad-d77d55a3f541.jar {}
[INFO ] 2019-04-26T03:30:38,933Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ecb564f1-83fb-4b4c-9176-9c862e3cd417.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-04554c43-68e7-4c1d-840b-dd2671933141.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-6e25f622-100f-43eb-b2ad-d77d55a3f541.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:30:38,967Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:30:38,970Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:30:38,985Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ecb564f1-83fb-4b4c-9176-9c862e3cd417.jar {}
[INFO ] 2019-04-26T03:30:39,029Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-04554c43-68e7-4c1d-840b-dd2671933141.jar {}
[INFO ] 2019-04-26T03:30:39,144Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-6e25f622-100f-43eb-b2ad-d77d55a3f541.jar {}
[INFO ] 2019-04-26T03:30:39,258Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@73d7e7aa {}
[INFO ] 2019-04-26T03:30:40,052Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:30:40,101Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:30:40,109Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:30:42,194Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:30:42,730Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:30:42,732Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:42,745Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:42,847Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:42,850Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:43,051Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:30:43,058Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:30:43,163Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:30:43,374Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C328084D49B1EC8428D9608EC80CA261BAC24DA4B419A051F4E41CA233B61F23, not inserting the second time {}
[INFO ] 2019-04-26T03:30:43,449Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:43,478Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:30:43,480Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:43,482Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:43,484Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:30:43,486Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:43,492Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:30:43,494Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:30:43,520Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:30:43,533Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7cfe97db {}
[INFO ] 2019-04-26T03:30:43,554Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:30:43,556Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:30:43,558Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:30:43,746Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:30:43,757Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:30:43,759Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:43,764Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:43,771Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:43,773Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:43,839Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:30:43,841Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:30:43,868Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AC66EB5254E7D7B077F483286305FD0643068BECE5DF9E98C5C0FB201FB74346, not inserting the second time {}
[INFO ] 2019-04-26T03:30:43,878Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:43,885Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:43,899Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:43,901Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:43,904Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:43,915Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:43,917Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:43,928Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:30:43,930Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:43,931Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:43,933Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:30:43,939Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:43,943Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:30:43,945Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:30:43,964Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:30:43,980Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3949fcdc {}
[INFO ] 2019-04-26T03:30:43,992Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:30:43,994Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:30:43,996Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:30:44,163Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:30:44,172Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:30:44,174Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,180Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:44,186Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,188Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,250Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:30:44,253Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:30:44,273Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C4859775344EA2E99556436022EFB5753D61A1A429DBC0C68905BDE40E249D55, not inserting the second time {}
[INFO ] 2019-04-26T03:30:44,281Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:44,284Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:44,295Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:44,297Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,300Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:44,310Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,312Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:44,315Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:44,331Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:44,335Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,338Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:44,356Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,358Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,369Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:30:44,371Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,372Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,374Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:30:44,378Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,383Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:30:44,385Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:30:44,407Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:30:44,420Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6c40bb07 {}
[INFO ] 2019-04-26T03:30:44,439Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:30:44,445Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:30:44,450Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:30:44,757Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:30:44,775Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:30:44,778Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:44,784Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:44,791Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:44,792Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:44,850Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:30:44,853Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:30:44,874Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F14B53A3A54A8C92A31A99A74E2B801AFF1492C26C06CA03511AA9F36691F50A, not inserting the second time {}
[INFO ] 2019-04-26T03:30:44,882Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:44,884Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:44,892Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249442732) {}
[INFO ] 2019-04-26T03:30:44,894Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:44,896Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:44,909Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:44,910Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:44,912Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:44,921Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249443758) {}
[INFO ] 2019-04-26T03:30:44,923Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:44,929Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:44,941Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:44,944Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,949Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:44,962Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249444174) {}
[INFO ] 2019-04-26T03:30:44,965Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:44,967Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:30:44,986Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:44,988Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:44,996Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:30:44,998Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:45,000Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:45,002Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:30:45,003Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249444778) {}
[INFO ] 2019-04-26T03:30:45,039Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:30:45,040Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:30:45,042Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[WARN ] 2019-04-26T03:30:45,808Z [Mock network] flow.[36725173-6ab9-47bf-8dbb-d5b60cfbe60f].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:109) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:81) ~[classes/:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:21) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-04-26T03:31:23,820Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-8eba51d6-fae7-4485-994b-ff9e178e3612.jar {}
[INFO ] 2019-04-26T03:31:23,871Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-972636b9-e5e4-4c60-9e3a-11e694de4442.jar {}
[INFO ] 2019-04-26T03:31:23,889Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-bddf8eba-b35f-4c3d-9fa5-88739a147f10.jar {}
[INFO ] 2019-04-26T03:31:23,917Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-8eba51d6-fae7-4485-994b-ff9e178e3612.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-972636b9-e5e4-4c60-9e3a-11e694de4442.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-bddf8eba-b35f-4c3d-9fa5-88739a147f10.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:31:23,958Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:31:23,962Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:31:23,977Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-8eba51d6-fae7-4485-994b-ff9e178e3612.jar {}
[INFO ] 2019-04-26T03:31:24,013Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-972636b9-e5e4-4c60-9e3a-11e694de4442.jar {}
[INFO ] 2019-04-26T03:31:24,048Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-bddf8eba-b35f-4c3d-9fa5-88739a147f10.jar {}
[INFO ] 2019-04-26T03:31:24,152Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@118f39f3 {}
[INFO ] 2019-04-26T03:31:24,869Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:31:24,913Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:31:24,918Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:31:26,957Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:31:27,479Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:31:27,481Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:27,494Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:27,606Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:27,609Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:27,792Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:31:27,799Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:31:27,904Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:31:28,113Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 75CBB21A135DA47036E28177777E340B142F96024CF6BC2A2D1C49E023E57A18, not inserting the second time {}
[INFO ] 2019-04-26T03:31:28,191Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:28,218Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:31:28,220Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:28,222Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:28,223Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:31:28,225Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:28,231Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:31:28,233Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:31:28,256Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:31:28,269Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@13d8d105 {}
[INFO ] 2019-04-26T03:31:28,284Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:31:28,287Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:31:28,289Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:31:28,468Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:31:28,479Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:31:28,481Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:28,489Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:28,497Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:28,498Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:28,554Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:31:28,556Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:31:28,576Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5394CCC727FBCD55FB72753BD7BEA50515EE973A838E6E6A92BBCE87973F2075, not inserting the second time {}
[INFO ] 2019-04-26T03:31:28,583Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:28,590Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:28,604Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:28,607Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:28,610Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:28,621Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:28,622Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:28,629Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:31:28,630Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:28,632Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:28,634Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:31:28,636Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:28,641Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:31:28,645Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:31:28,671Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:31:28,686Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@e8574dd {}
[INFO ] 2019-04-26T03:31:28,706Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:31:28,711Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:31:28,713Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:31:28,839Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:31:28,852Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:31:28,853Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:28,859Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:28,871Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:28,872Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:28,937Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:31:28,941Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:31:28,963Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 616AE5D69E26D7D05401927F44EB2CEA580784A711742F16E217088D35709F02, not inserting the second time {}
[INFO ] 2019-04-26T03:31:28,971Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:28,974Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:28,985Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:28,986Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:28,988Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:29,002Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:29,003Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:29,006Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:29,026Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:29,027Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:29,030Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:29,039Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:29,041Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:29,047Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:31:29,049Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:29,052Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:29,053Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:31:29,055Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:29,060Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:31:29,063Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:31:29,089Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:31:29,105Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@426ead99 {}
[INFO ] 2019-04-26T03:31:29,121Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:31:29,125Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:31:29,128Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:31:29,244Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:31:29,267Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:31:29,270Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,279Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:29,289Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,291Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,358Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:31:29,361Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:31:29,384Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AE0A930B064321CE64907EC23BD8634234C1EF855FEC7D8D5D36169BCABFA166, not inserting the second time {}
[INFO ] 2019-04-26T03:31:29,390Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:29,393Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:29,407Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556249487481) {}
[INFO ] 2019-04-26T03:31:29,410Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,413Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:29,425Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,427Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:29,429Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:29,438Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556249488481) {}
[INFO ] 2019-04-26T03:31:29,440Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,442Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:29,449Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,450Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:29,454Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:29,467Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556249488853) {}
[INFO ] 2019-04-26T03:31:29,468Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,472Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:31:29,489Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,490Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,497Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:31:29,499Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,502Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,505Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:31:29,506Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556249489270) {}
[INFO ] 2019-04-26T03:31:29,530Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:31:29,531Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:31:29,533Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[WARN ] 2019-04-26T03:31:30,263Z [Mock network] flow.[4e2bc9aa-3343-4a3c-9fd0-ae1a6aeb7575].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:109) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:81) ~[classes/:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:21) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-04-26T03:43:11,699Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-09349a9f-5f84-43fc-9748-1e3dbf5032ec.jar {}
[INFO ] 2019-04-26T03:43:11,754Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-b3c476ad-d1c7-4b6d-838c-e08ad64d3d86.jar {}
[INFO ] 2019-04-26T03:43:11,771Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-faed424c-59fd-4696-bb3a-1803fdd88d70.jar {}
[INFO ] 2019-04-26T03:43:11,800Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-09349a9f-5f84-43fc-9748-1e3dbf5032ec.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-b3c476ad-d1c7-4b6d-838c-e08ad64d3d86.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-faed424c-59fd-4696-bb3a-1803fdd88d70.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:43:11,831Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:43:11,835Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:43:11,848Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-09349a9f-5f84-43fc-9748-1e3dbf5032ec.jar {}
[INFO ] 2019-04-26T03:43:11,877Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-b3c476ad-d1c7-4b6d-838c-e08ad64d3d86.jar {}
[INFO ] 2019-04-26T03:43:11,902Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-faed424c-59fd-4696-bb3a-1803fdd88d70.jar {}
[INFO ] 2019-04-26T03:43:12,047Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6915351c {}
[INFO ] 2019-04-26T03:43:12,845Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:43:12,889Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:43:12,895Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:43:15,025Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:43:15,593Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:43:15,597Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:15,610Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:15,716Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:15,719Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:15,904Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:43:15,913Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:43:16,018Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:43:16,239Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6701F6A3B67EF5DF3BBF80DD40357F1F763A5A8B414FAC4F69F1B8261388178B, not inserting the second time {}
[INFO ] 2019-04-26T03:43:16,339Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:16,373Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:43:16,377Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:16,382Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:16,384Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:43:16,386Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:16,391Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:43:16,394Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:43:16,427Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:43:16,438Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7cfe97db {}
[INFO ] 2019-04-26T03:43:16,456Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:43:16,459Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:43:16,462Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:43:16,648Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:43:16,665Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:43:16,667Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:16,680Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:16,689Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:16,693Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:16,771Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:43:16,775Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:43:16,799Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C4771AA13AC8C6C8D53A772781A926ACBE849D91F8DFA6885F55E2DC162C9C10, not inserting the second time {}
[INFO ] 2019-04-26T03:43:16,807Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:16,812Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:16,826Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:16,828Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:16,831Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:16,841Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:16,843Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:16,851Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:43:16,852Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:16,854Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:16,859Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:43:16,863Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:16,868Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:43:16,870Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:43:16,902Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:43:16,918Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ab632d {}
[INFO ] 2019-04-26T03:43:16,938Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:43:16,941Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:43:16,942Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:43:17,109Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:43:17,125Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:43:17,128Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,136Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:17,147Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,150Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,210Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:43:17,212Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:43:17,231Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 655DADB71F75DFC53336D3A5600DFF39C649B2883009F0DEFE77276F7C605B41, not inserting the second time {}
[INFO ] 2019-04-26T03:43:17,240Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:17,243Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:17,254Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:17,255Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,258Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:17,268Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,269Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:17,272Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:17,291Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:17,293Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,298Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:17,311Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,313Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,322Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:43:17,323Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,327Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,328Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:43:17,331Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,335Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:43:17,337Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:43:17,358Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:43:17,373Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@713d2fe8 {}
[INFO ] 2019-04-26T03:43:17,389Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:43:17,391Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:43:17,393Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:43:17,534Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:43:17,560Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:43:17,566Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,573Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:17,586Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,588Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,643Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:43:17,645Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:43:17,664Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F62EDF7EEB7EA3302C4D321146F3187AC720A1FEB7A98EE45F19AED0E0133473, not inserting the second time {}
[INFO ] 2019-04-26T03:43:17,671Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:17,675Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:17,688Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250195596) {}
[INFO ] 2019-04-26T03:43:17,692Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,696Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:17,709Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,713Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:17,718Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:17,734Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250196667) {}
[INFO ] 2019-04-26T03:43:17,736Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,739Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:17,755Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,757Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,760Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:17,773Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250197128) {}
[INFO ] 2019-04-26T03:43:17,775Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,782Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:43:17,797Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,800Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,805Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:43:17,806Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,807Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,809Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:43:17,810Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250197566) {}
[INFO ] 2019-04-26T03:43:17,829Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:43:17,831Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:43:17,835Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:43:18,986Z [Mock network] flow.[1024031d-0584-44ac-acc8-3347948a2854].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4367516624510889660). {}
[INFO ] 2019-04-26T03:43:19,161Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Borrower, L=Bangkae, C=GB. Session id for tracing purposes is SessionId(toLong=-4367516624510889660). {invocation_id=a3d962b9-2b5d-40f3-81df-8a527e0d47d3, invocation_timestamp=2019-04-26T03:43:19.154Z, session_id=a3d962b9-2b5d-40f3-81df-8a527e0d47d3, session_timestamp=2019-04-26T03:43:19.154Z}
[INFO ] 2019-04-26T03:43:19,454Z [Mock network] flow.[1024031d-0584-44ac-acc8-3347948a2854].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=1591290641781809939). {}
[INFO ] 2019-04-26T03:43:19,479Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Borrower, L=Bangkae, C=GB. Session id for tracing purposes is SessionId(toLong=1591290641781809939). {actor_id=Only For Testing, actor_owningIdentity=O=Borrower, L=Bangkae, C=GB, actor_store_id=TEST, invocation_id=9c7a1587-ad08-4856-bfdd-b5c8c7c7f6dd, invocation_timestamp=2019-04-26T03:43:19.479Z, session_id=9c7a1587-ad08-4856-bfdd-b5c8c7c7f6dd, session_timestamp=2019-04-26T03:43:19.479Z}
[INFO ] 2019-04-26T03:43:19,563Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-26T03:51:19,469Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-065bdca1-b525-44f3-a27b-60e600a6d620.jar {}
[INFO ] 2019-04-26T03:51:19,520Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-87e86a72-3562-4ab5-b086-c09c93317ba5.jar {}
[INFO ] 2019-04-26T03:51:19,537Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-8cdd4d1f-361d-4c2b-9e18-a69e574d9388.jar {}
[INFO ] 2019-04-26T03:51:19,561Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-065bdca1-b525-44f3-a27b-60e600a6d620.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-87e86a72-3562-4ab5-b086-c09c93317ba5.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-8cdd4d1f-361d-4c2b-9e18-a69e574d9388.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:51:19,591Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:51:19,594Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:51:19,608Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-065bdca1-b525-44f3-a27b-60e600a6d620.jar {}
[INFO ] 2019-04-26T03:51:19,641Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-87e86a72-3562-4ab5-b086-c09c93317ba5.jar {}
[INFO ] 2019-04-26T03:51:19,667Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-8cdd4d1f-361d-4c2b-9e18-a69e574d9388.jar {}
[INFO ] 2019-04-26T03:51:19,816Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6915351c {}
[INFO ] 2019-04-26T03:51:20,665Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:51:20,706Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:51:20,712Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:51:22,781Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:51:23,321Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:51:23,323Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:23,336Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:23,456Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:23,458Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:23,667Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:51:23,675Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:51:23,778Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:51:23,982Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D363F9C2D4CA4430FE68681202BF5F50844108C086D057E453C5218DBEC6A009, not inserting the second time {}
[INFO ] 2019-04-26T03:51:24,069Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:24,107Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:51:24,111Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:24,112Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:24,114Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:51:24,116Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:24,124Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:51:24,126Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:51:24,151Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:51:24,164Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7cfe97db {}
[INFO ] 2019-04-26T03:51:24,179Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:51:24,181Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:51:24,183Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:51:24,357Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:51:24,370Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:51:24,372Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:24,378Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:24,384Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:24,386Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:24,468Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:51:24,471Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:51:24,504Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 01D7E1EF3A8971AB6446F061B9F4A4371C2F338D963DC63028C92D2D9702BD4B, not inserting the second time {}
[INFO ] 2019-04-26T03:51:24,516Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:24,521Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:24,535Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:24,537Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:24,540Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:24,552Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:24,554Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:24,561Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:51:24,563Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:24,565Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:24,567Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:51:24,569Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:24,573Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:51:24,575Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:51:24,598Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:51:24,614Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ab632d {}
[INFO ] 2019-04-26T03:51:24,627Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:51:24,629Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:51:24,631Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:51:24,802Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:51:24,814Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:51:24,815Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:24,821Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:24,826Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:24,828Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:24,884Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:51:24,886Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:51:24,906Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 09D07C38AF40F7E709872B44888B06039E17FCF85CB933E49340D01E758EC7CF, not inserting the second time {}
[INFO ] 2019-04-26T03:51:24,918Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:24,921Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:24,936Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:24,938Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:24,941Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:24,953Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:24,954Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:24,957Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:24,967Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:24,970Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:24,975Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:24,987Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:24,989Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:24,995Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:51:24,999Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:25,002Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:25,003Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:51:25,004Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:25,009Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:51:25,014Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:51:25,076Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:51:25,094Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@713d2fe8 {}
[INFO ] 2019-04-26T03:51:25,115Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:51:25,117Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:51:25,118Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:51:25,260Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:51:25,292Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:51:25,294Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,300Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:25,309Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,313Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,365Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:51:25,367Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:51:25,388Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9161541AC468E232AEDE1CF9A5BE8A372170457C9CC6350567A4F17CC752FE9D, not inserting the second time {}
[INFO ] 2019-04-26T03:51:25,396Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:25,399Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:25,408Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250683323) {}
[INFO ] 2019-04-26T03:51:25,410Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,414Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:25,430Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,432Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:25,437Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:25,453Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Borrower, L=Bangkae, C=GB], platformVersion=1, serial=1556250684372) {}
[INFO ] 2019-04-26T03:51:25,455Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,458Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:25,472Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,475Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:25,480Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:25,492Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250684815) {}
[INFO ] 2019-04-26T03:51:25,495Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,501Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:51:25,518Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,522Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,530Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:51:25,531Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,533Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,536Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:51:25,538Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Financial, L=Nana, C=TH], platformVersion=1, serial=1556250685294) {}
[INFO ] 2019-04-26T03:51:25,558Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:51:25,559Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:51:25,561Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:51:26,469Z [Mock network] flow.[c8b74b23-6225-4343-a3d0-538eaa9bd301].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-464319445014150548). {}
[INFO ] 2019-04-26T03:51:26,615Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Borrower, L=Bangkae, C=GB. Session id for tracing purposes is SessionId(toLong=-464319445014150548). {invocation_id=2ae81233-3283-4ef7-beec-1bb965c433d8, invocation_timestamp=2019-04-26T03:51:26.608Z, session_id=2ae81233-3283-4ef7-beec-1bb965c433d8, session_timestamp=2019-04-26T03:51:26.608Z}
[INFO ] 2019-04-26T03:51:26,880Z [Mock network] flow.[c8b74b23-6225-4343-a3d0-538eaa9bd301].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5973499403819080235). {}
[INFO ] 2019-04-26T03:51:26,905Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Borrower, L=Bangkae, C=GB. Session id for tracing purposes is SessionId(toLong=5973499403819080235). {actor_id=Only For Testing, actor_owningIdentity=O=Borrower, L=Bangkae, C=GB, actor_store_id=TEST, invocation_id=42a71318-6404-42a5-b2d4-1b2b96b52678, invocation_timestamp=2019-04-26T03:51:26.904Z, session_id=42a71318-6404-42a5-b2d4-1b2b96b52678, session_timestamp=2019-04-26T03:51:26.904Z}
[INFO ] 2019-04-26T03:51:26,984Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-26T03:54:10,656Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-2d9442af-984f-4d11-a52c-4265991c161d.jar {}
[INFO ] 2019-04-26T03:54:10,710Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-3abbc010-c9d7-404b-91c1-331dc0d8877a.jar {}
[INFO ] 2019-04-26T03:54:10,726Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-57490f91-ce86-48f4-af80-67d5eaacecd7.jar {}
[INFO ] 2019-04-26T03:54:10,749Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-2d9442af-984f-4d11-a52c-4265991c161d.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3abbc010-c9d7-404b-91c1-331dc0d8877a.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-57490f91-ce86-48f4-af80-67d5eaacecd7.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:54:10,783Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:54:10,786Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:54:10,800Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-2d9442af-984f-4d11-a52c-4265991c161d.jar {}
[INFO ] 2019-04-26T03:54:10,837Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3abbc010-c9d7-404b-91c1-331dc0d8877a.jar {}
[INFO ] 2019-04-26T03:54:10,864Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-57490f91-ce86-48f4-af80-67d5eaacecd7.jar {}
[INFO ] 2019-04-26T03:54:11,047Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@118f39f3 {}
[INFO ] 2019-04-26T03:54:11,907Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:54:11,953Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:54:11,958Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:54:14,157Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:54:14,761Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:54:14,764Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:14,777Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:14,901Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:14,904Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:15,134Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:54:15,141Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:54:15,248Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:54:15,479Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8046A8324FA16A78ADAE7BC1FD0375A8A70F9561316C1E116D8E2821E92B67A4, not inserting the second time {}
[INFO ] 2019-04-26T03:54:15,561Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:15,588Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:54:15,590Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:15,592Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:15,594Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:54:15,596Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:15,604Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:54:15,606Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:54:15,628Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:54:15,641Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@13d8d105 {}
[INFO ] 2019-04-26T03:54:15,655Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:54:15,658Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:54:15,662Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:54:15,854Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:54:15,867Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:54:15,869Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:15,877Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:15,885Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:15,886Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:15,953Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:54:15,959Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:54:15,998Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 54CCBB243BBF114CE61D9873A7ADD0D24EFF1709D5EC9FA1AE7F565CB7C11E37, not inserting the second time {}
[INFO ] 2019-04-26T03:54:16,010Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:16,014Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:16,036Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:16,044Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:16,047Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:16,061Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:16,064Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:16,075Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:54:16,077Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:16,079Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:16,085Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:54:16,087Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:16,090Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:54:16,097Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:54:16,124Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:54:16,136Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@e8574dd {}
[INFO ] 2019-04-26T03:54:16,156Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:54:16,159Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:54:16,161Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:54:16,324Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:54:16,334Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:54:16,336Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:16,342Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:16,347Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:16,348Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:16,411Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:54:16,415Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:54:16,447Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1AF66B86CEE6EF74135B717216D218A8AA40F611AEB99C10E755813444B51CA2, not inserting the second time {}
[INFO ] 2019-04-26T03:54:16,463Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:16,466Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:16,486Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:16,491Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:16,494Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:16,504Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:16,505Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:16,511Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:16,522Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:16,524Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:16,527Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:16,537Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:16,540Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:16,546Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:54:16,547Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:16,549Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:16,550Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:54:16,552Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:16,556Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:54:16,557Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:54:16,576Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:54:16,585Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@426ead99 {}
[INFO ] 2019-04-26T03:54:16,598Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:54:16,600Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:54:16,602Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:54:16,908Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:54:16,923Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:54:16,926Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:16,931Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:16,938Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:16,940Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:16,993Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:54:16,995Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:54:17,012Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3FACE12B8780BED68730EAA643E3FDD3462579E36795D6EDE69B39A0984E5F1F, not inserting the second time {}
[INFO ] 2019-04-26T03:54:17,020Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:17,023Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:17,040Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250854764) {}
[INFO ] 2019-04-26T03:54:17,042Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:17,045Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:17,054Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:17,056Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:17,058Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:17,067Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250855869) {}
[INFO ] 2019-04-26T03:54:17,069Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:17,072Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:17,087Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:17,091Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:17,094Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:17,103Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250856336) {}
[INFO ] 2019-04-26T03:54:17,105Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:17,110Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:54:17,123Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:17,127Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:17,136Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:54:17,140Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:17,141Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:17,143Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:54:17,144Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250856926) {}
[INFO ] 2019-04-26T03:54:17,172Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:54:17,176Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:54:17,179Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[WARN ] 2019-04-26T03:54:18,035Z [Mock network] flow.[db8f341e-2961-40b3-8555-dec3705e0c1d].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:109) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:81) ~[classes/:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:21) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-04-26T03:55:07,721Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-2fa3d2a0-b5e9-4fb3-9cb8-3738b77f103d.jar {}
[INFO ] 2019-04-26T03:55:07,770Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-0e1ec2e2-d224-4446-97b4-034930333ce6.jar {}
[INFO ] 2019-04-26T03:55:07,787Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-e7e47d21-5a22-4c33-9334-351e5d979701.jar {}
[INFO ] 2019-04-26T03:55:07,814Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-2fa3d2a0-b5e9-4fb3-9cb8-3738b77f103d.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-0e1ec2e2-d224-4446-97b4-034930333ce6.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-e7e47d21-5a22-4c33-9334-351e5d979701.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:55:07,844Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:55:07,847Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:55:07,860Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-2fa3d2a0-b5e9-4fb3-9cb8-3738b77f103d.jar {}
[INFO ] 2019-04-26T03:55:07,893Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-0e1ec2e2-d224-4446-97b4-034930333ce6.jar {}
[INFO ] 2019-04-26T03:55:07,904Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-e7e47d21-5a22-4c33-9334-351e5d979701.jar {}
[INFO ] 2019-04-26T03:55:08,083Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@118f39f3 {}
[INFO ] 2019-04-26T03:55:08,915Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:55:08,970Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:08,977Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:11,302Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:11,904Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:55:11,907Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:11,922Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:12,058Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:12,063Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:12,255Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:55:12,267Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:55:12,373Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:55:12,580Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key EBD7D1F8FE287ED6A7FCF7337D751512A7216E4FD9F30F26C354A973876E4712, not inserting the second time {}
[INFO ] 2019-04-26T03:55:12,673Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:12,706Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:55:12,708Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:12,711Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:12,713Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:55:12,714Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:12,720Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:55:12,722Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:55:12,745Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:55:12,760Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@13d8d105 {}
[INFO ] 2019-04-26T03:55:12,778Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:55:12,782Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:12,784Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:13,045Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:13,057Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:55:13,060Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:13,066Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:13,078Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:13,082Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:13,145Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:55:13,147Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:55:13,169Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 427B8A3F3D1815DB17EA7525745F8E0DA3878B6E0F20DF1A621F9210DDA4DB77, not inserting the second time {}
[INFO ] 2019-04-26T03:55:13,181Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:13,187Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:13,200Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:13,201Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:13,205Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:13,220Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:13,222Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:13,231Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:55:13,233Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:13,235Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:13,238Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:55:13,240Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:13,243Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:55:13,244Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:55:13,274Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:55:13,297Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@e8574dd {}
[INFO ] 2019-04-26T03:55:13,316Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:55:13,320Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:13,321Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:13,466Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:13,476Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:55:13,481Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:13,491Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:13,499Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:13,503Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:13,574Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:55:13,579Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:55:13,606Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 704042C7D20CD855F7DF4102C4AAEBCA97DFD104F8313A28842016CCB34B8B21, not inserting the second time {}
[INFO ] 2019-04-26T03:55:13,618Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:13,621Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:13,631Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:13,632Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:13,634Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:13,645Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:13,646Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:13,649Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:13,659Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:13,661Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:13,663Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:13,673Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:13,675Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:13,683Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:55:13,685Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:13,686Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:13,688Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:55:13,690Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:13,694Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:55:13,697Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:55:13,721Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:55:13,735Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@426ead99 {}
[INFO ] 2019-04-26T03:55:13,749Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:55:13,751Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:13,757Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:13,897Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:13,924Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:55:13,927Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:13,935Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:13,948Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:13,952Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:14,017Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:55:14,019Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:55:14,043Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 50B2E4C14339AFAB995F5641E35E356C1EDEF71F5F1B1D0EF947739D9A8878E2, not inserting the second time {}
[INFO ] 2019-04-26T03:55:14,051Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:14,053Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:14,062Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250911906) {}
[INFO ] 2019-04-26T03:55:14,064Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:14,066Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:14,078Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:14,080Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:14,083Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:14,096Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250913060) {}
[INFO ] 2019-04-26T03:55:14,098Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:14,103Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:14,115Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:14,119Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:14,122Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:14,137Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250913481) {}
[INFO ] 2019-04-26T03:55:14,139Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:14,142Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:55:14,155Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:14,158Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:14,164Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:55:14,167Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:14,168Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:14,170Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:55:14,172Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250913927) {}
[INFO ] 2019-04-26T03:55:14,196Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:55:14,200Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:55:14,202Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[WARN ] 2019-04-26T03:55:15,033Z [Mock network] flow.[79f2fe20-322b-4e96-8e83-6c93d73a67a0].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:109) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:81) ~[classes/:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:21) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-04-26T03:55:58,855Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-ce2dd4cf-972a-4ad3-ab4c-2bcbd507e2c5.jar {}
[INFO ] 2019-04-26T03:55:58,901Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-a2c9e78e-0fd8-4a60-8d49-3e2bd4bbec61.jar {}
[INFO ] 2019-04-26T03:55:58,916Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-d4595741-f92b-458d-83a6-e8553cf87448.jar {}
[INFO ] 2019-04-26T03:55:58,943Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ce2dd4cf-972a-4ad3-ab4c-2bcbd507e2c5.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-a2c9e78e-0fd8-4a60-8d49-3e2bd4bbec61.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-d4595741-f92b-458d-83a6-e8553cf87448.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T03:55:58,975Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:55:58,978Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:55:58,992Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ce2dd4cf-972a-4ad3-ab4c-2bcbd507e2c5.jar {}
[INFO ] 2019-04-26T03:55:59,028Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-a2c9e78e-0fd8-4a60-8d49-3e2bd4bbec61.jar {}
[INFO ] 2019-04-26T03:55:59,059Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-d4595741-f92b-458d-83a6-e8553cf87448.jar {}
[INFO ] 2019-04-26T03:55:59,183Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@46f597f1 {}
[INFO ] 2019-04-26T03:55:59,909Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:55:59,962Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:55:59,969Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:56:02,159Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:56:02,699Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:56:02,704Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:02,717Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:02,842Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:02,846Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:03,047Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:56:03,055Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T03:56:03,162Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T03:56:03,368Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C702B29A90571D724137F0F2368EE7FED6074AF58478229A1435CC3D8724910A, not inserting the second time {}
[INFO ] 2019-04-26T03:56:03,454Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:03,478Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:56:03,480Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:03,482Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:03,484Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:56:03,486Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:03,494Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:56:03,496Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:56:03,525Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:56:03,540Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@323ebcc6 {}
[INFO ] 2019-04-26T03:56:03,555Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:56:03,557Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:56:03,559Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:56:03,742Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:56:03,754Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:56:03,756Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:03,761Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:03,767Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:03,769Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:03,848Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:56:03,853Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:56:03,881Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 31BC88E595AE8BF7F3E87546BCB3ECA6B5A8C94AE14A23989E92C7AC7BEB8458, not inserting the second time {}
[INFO ] 2019-04-26T03:56:03,895Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:03,900Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:03,916Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:03,918Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:03,923Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:03,936Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:03,937Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:03,943Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:56:03,945Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:03,946Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:03,948Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:56:03,950Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:03,953Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:56:03,955Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:56:03,971Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:56:03,984Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@64aa7a33 {}
[INFO ] 2019-04-26T03:56:03,998Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:56:04,001Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:56:04,004Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:56:04,182Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:56:04,192Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:56:04,194Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,206Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:04,216Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,217Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,271Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:56:04,273Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:56:04,292Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1588B192A165538FB7967FEB6A7A23420F23E43F1245153BE4A236E447817B55, not inserting the second time {}
[INFO ] 2019-04-26T03:56:04,306Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:04,310Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:04,324Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:04,326Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,328Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:04,340Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,342Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:04,346Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:04,356Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:04,359Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,363Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:04,381Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,383Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,393Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:56:04,395Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,397Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,399Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:56:04,402Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,409Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T03:56:04,413Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T03:56:04,446Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T03:56:04,462Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7a86e414 {}
[INFO ] 2019-04-26T03:56:04,477Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T03:56:04,479Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:56:04,481Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:56:04,617Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T03:56:04,650Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T03:56:04,655Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,663Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:04,672Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,674Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,733Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T03:56:04,735Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T03:56:04,753Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 159F34EC84F16183CBA3BB1E368584A3F90EB4C4F75C16C83656C53E568A5651, not inserting the second time {}
[INFO ] 2019-04-26T03:56:04,759Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:04,762Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:04,773Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556250962704) {}
[INFO ] 2019-04-26T03:56:04,775Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,777Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:04,792Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,794Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:04,797Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:04,816Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556250963756) {}
[INFO ] 2019-04-26T03:56:04,818Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,823Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:04,838Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,839Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,845Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:04,862Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556250964194) {}
[INFO ] 2019-04-26T03:56:04,864Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,868Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T03:56:04,886Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,889Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,894Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:56:04,895Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,896Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,898Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T03:56:04,900Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556250964655) {}
[INFO ] 2019-04-26T03:56:04,922Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:56:04,923Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T03:56:04,925Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[WARN ] 2019-04-26T03:56:05,713Z [Mock network] flow.[509fb634-42c7-4746-a91c-52b2099e2482].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:109) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:81) ~[classes/:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:21) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-04-26T04:47:02,789Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-c2ddda6c-0612-4a9a-aa6a-e42ccc42a6fc.jar {}
[INFO ] 2019-04-26T04:47:02,839Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-b3342235-e82c-41e5-a396-3e7c66309227.jar {}
[INFO ] 2019-04-26T04:47:02,856Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-f2a70471-58b3-41de-a25d-7484054ef15b.jar {}
[INFO ] 2019-04-26T04:47:02,879Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-c2ddda6c-0612-4a9a-aa6a-e42ccc42a6fc.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-b3342235-e82c-41e5-a396-3e7c66309227.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-f2a70471-58b3-41de-a25d-7484054ef15b.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T04:47:02,910Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:47:02,914Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:47:02,934Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-c2ddda6c-0612-4a9a-aa6a-e42ccc42a6fc.jar {}
[INFO ] 2019-04-26T04:47:02,968Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-b3342235-e82c-41e5-a396-3e7c66309227.jar {}
[INFO ] 2019-04-26T04:47:02,996Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-f2a70471-58b3-41de-a25d-7484054ef15b.jar {}
[INFO ] 2019-04-26T04:47:03,123Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@73d7e7aa {}
[INFO ] 2019-04-26T04:47:03,935Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:47:03,993Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:47:04,000Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:47:06,206Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:47:06,721Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:47:06,724Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:06,736Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:06,835Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:06,838Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:06,998Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:47:07,007Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T04:47:07,119Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T04:47:07,318Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 371460E5EF5A078D8F957B3DE336104087F2ACAFA240DECD731B06E972A428BD, not inserting the second time {}
[INFO ] 2019-04-26T04:47:07,398Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:07,428Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:47:07,430Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:07,432Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:07,434Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:47:07,436Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:07,441Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:47:07,443Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:47:07,468Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T04:47:07,482Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7cfe97db {}
[INFO ] 2019-04-26T04:47:07,494Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:47:07,497Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:47:07,499Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:47:07,686Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:47:07,697Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:47:07,699Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:07,705Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:07,716Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:07,717Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:07,778Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:47:07,780Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T04:47:07,800Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BF23912C8C0E0033DF524332C365480D8DDAFDF7EB2C646F4C3D139F6EA22409, not inserting the second time {}
[INFO ] 2019-04-26T04:47:07,810Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:07,814Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:07,827Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:07,832Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:07,835Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:07,846Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:07,848Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:07,854Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:47:07,856Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:07,860Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:07,866Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:47:07,869Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:07,873Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:47:07,878Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:47:07,906Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T04:47:07,922Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ab632d {}
[INFO ] 2019-04-26T04:47:07,942Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:47:07,944Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:47:07,949Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:47:08,074Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:47:08,089Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:47:08,093Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,104Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:08,115Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,117Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,180Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:47:08,183Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T04:47:08,206Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9E56B091697526F942C7D4407860A5A156D8E6DAA09D6EEC78F60A606F02D6F0, not inserting the second time {}
[INFO ] 2019-04-26T04:47:08,217Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:08,220Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:08,233Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:08,236Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,241Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:08,253Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,255Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:08,259Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:08,269Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:08,271Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,274Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:08,286Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,288Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,294Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:47:08,296Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,300Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,302Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:47:08,303Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,308Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:47:08,313Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:47:08,343Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T04:47:08,356Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6c40bb07 {}
[INFO ] 2019-04-26T04:47:08,375Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:47:08,377Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:47:08,378Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:47:08,506Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:47:08,527Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:47:08,533Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,543Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:08,553Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,555Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,640Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:47:08,643Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T04:47:08,663Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 67122801E2178C02E4E71036706EB5232818DE2F3947E8630AFB445B015D4972, not inserting the second time {}
[INFO ] 2019-04-26T04:47:08,669Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:08,672Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:08,681Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254026723) {}
[INFO ] 2019-04-26T04:47:08,683Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,685Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:08,696Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,698Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:08,700Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:08,710Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254027699) {}
[INFO ] 2019-04-26T04:47:08,712Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,714Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:08,730Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,733Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,736Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:08,752Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254028093) {}
[INFO ] 2019-04-26T04:47:08,755Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,758Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:47:08,773Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,775Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,783Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:47:08,786Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,788Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,791Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:47:08,793Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254028533) {}
[INFO ] 2019-04-26T04:47:08,817Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T04:47:08,820Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T04:47:08,821Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[WARN ] 2019-04-26T04:47:09,632Z [Mock network] flow.[9bafdd61-afc6-4c31-97ee-27e2d01931c0].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:109) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:81) ~[classes/:?]
	at com.example.flow.BondFlow$Initiator.call(BondFlow.kt:21) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-04-26T04:55:37,457Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-e41ac925-c223-4de2-bee5-d08bf89bae37.jar {}
[INFO ] 2019-04-26T04:55:37,507Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-feaa0177-56be-4c3c-89d1-be7fb93dae10.jar {}
[INFO ] 2019-04-26T04:55:37,521Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-e0ec7fc0-2425-491b-9045-c923de5cd659.jar {}
[INFO ] 2019-04-26T04:55:37,546Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e41ac925-c223-4de2-bee5-d08bf89bae37.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-feaa0177-56be-4c3c-89d1-be7fb93dae10.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-e0ec7fc0-2425-491b-9045-c923de5cd659.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T04:55:37,588Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:55:37,591Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:55:37,604Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e41ac925-c223-4de2-bee5-d08bf89bae37.jar {}
[INFO ] 2019-04-26T04:55:37,646Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-feaa0177-56be-4c3c-89d1-be7fb93dae10.jar {}
[INFO ] 2019-04-26T04:55:37,674Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-e0ec7fc0-2425-491b-9045-c923de5cd659.jar {}
[INFO ] 2019-04-26T04:55:37,821Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@73d7e7aa {}
[INFO ] 2019-04-26T04:55:38,629Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:55:38,668Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:55:38,674Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:55:40,760Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:55:41,325Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:55:41,328Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:41,345Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:41,460Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:41,466Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:41,640Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:55:41,647Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T04:55:41,760Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T04:55:41,963Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 2C5430E33C66E9149D5495F1EF1364DFED3A0438B5AA849C78F00AC1AC6A071F, not inserting the second time {}
[INFO ] 2019-04-26T04:55:42,037Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:42,078Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:55:42,080Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:42,082Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:42,084Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:55:42,086Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:42,091Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:55:42,092Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:55:42,116Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T04:55:42,129Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@54c78734 {}
[INFO ] 2019-04-26T04:55:42,142Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:55:42,144Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:55:42,146Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:55:42,319Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:55:42,330Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:55:42,333Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:42,338Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:42,344Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:42,346Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:42,402Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:55:42,404Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T04:55:42,426Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F0FE00218FEB75598BF303AFD0FE9C002EFFA84124E0B1BB0B11E3AF11EB6B07, not inserting the second time {}
[INFO ] 2019-04-26T04:55:42,436Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:42,441Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:42,451Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:42,455Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:42,459Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:42,473Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:42,475Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:42,481Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:55:42,483Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:42,485Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:42,487Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:55:42,489Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:42,492Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:55:42,494Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:55:42,527Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T04:55:42,542Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@e8574dd {}
[INFO ] 2019-04-26T04:55:42,566Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:55:42,569Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:55:42,573Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:55:42,720Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:55:42,737Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:55:42,741Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:42,746Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:42,758Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:42,761Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:42,826Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:55:42,828Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T04:55:42,846Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F8C61BA95DCD67B0FEC6937889ACD50C95A070DA79CCDBC77E09AE68BE6C055F, not inserting the second time {}
[INFO ] 2019-04-26T04:55:42,857Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:42,861Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:42,874Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:42,876Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:42,879Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:42,890Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:42,892Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:42,895Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:42,905Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:42,907Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:42,909Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:42,923Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:42,925Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:42,936Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:55:42,939Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:42,941Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:42,942Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:55:42,944Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:42,951Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:55:42,953Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:55:42,984Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T04:55:42,997Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@f054e29 {}
[INFO ] 2019-04-26T04:55:43,014Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:55:43,018Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:55:43,020Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:55:43,142Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:55:43,169Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:55:43,174Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,179Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:43,192Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,195Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,256Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:55:43,260Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T04:55:43,280Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AD589D65F6866FC277F4E2BB5126F2BF88302FC264724ECE5F28E277085ED5B8, not inserting the second time {}
[INFO ] 2019-04-26T04:55:43,288Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:43,291Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:43,301Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254541328) {}
[INFO ] 2019-04-26T04:55:43,303Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,306Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:43,315Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,317Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:43,320Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:43,329Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254542333) {}
[INFO ] 2019-04-26T04:55:43,331Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,333Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:43,344Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,345Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:43,348Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:43,358Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254542741) {}
[INFO ] 2019-04-26T04:55:43,360Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,366Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:55:43,380Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,384Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,391Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:55:43,393Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,396Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,398Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:55:43,401Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254543174) {}
[INFO ] 2019-04-26T04:55:43,428Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T04:55:43,430Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T04:55:43,434Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T04:55:44,314Z [Mock network] flow.[d5fa1f17-8200-44e3-9e8c-dc2ceb91e2c6].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6201272349154081152). {}
[INFO ] 2019-04-26T04:55:44,461Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6201272349154081152). {invocation_id=2269be3c-7807-43b9-ad3a-90e7b81ef7b3, invocation_timestamp=2019-04-26T04:55:44.452Z, session_id=2269be3c-7807-43b9-ad3a-90e7b81ef7b3, session_timestamp=2019-04-26T04:55:44.452Z}
[INFO ] 2019-04-26T04:55:44,715Z [Mock network] flow.[d5fa1f17-8200-44e3-9e8c-dc2ceb91e2c6].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4443694275280444889). {}
[INFO ] 2019-04-26T04:55:44,738Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4443694275280444889). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=18171194-6d60-449f-85dd-e02984307328, invocation_timestamp=2019-04-26T04:55:44.738Z, session_id=18171194-6d60-449f-85dd-e02984307328, session_timestamp=2019-04-26T04:55:44.738Z}
[INFO ] 2019-04-26T04:57:47,662Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-3603c071-b196-4bfd-83c5-a0c59a29b480.jar {}
[INFO ] 2019-04-26T04:57:47,713Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-07a191db-bca7-40bf-b080-516f976ee917.jar {}
[INFO ] 2019-04-26T04:57:47,730Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-bbff5451-cd8f-469f-97ef-572536a562d1.jar {}
[INFO ] 2019-04-26T04:57:47,758Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3603c071-b196-4bfd-83c5-a0c59a29b480.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-07a191db-bca7-40bf-b080-516f976ee917.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-bbff5451-cd8f-469f-97ef-572536a562d1.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T04:57:47,790Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:57:47,793Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:57:47,808Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3603c071-b196-4bfd-83c5-a0c59a29b480.jar {}
[INFO ] 2019-04-26T04:57:47,844Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-07a191db-bca7-40bf-b080-516f976ee917.jar {}
[INFO ] 2019-04-26T04:57:47,869Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-bbff5451-cd8f-469f-97ef-572536a562d1.jar {}
[INFO ] 2019-04-26T04:57:48,012Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7be3a837 {}
[INFO ] 2019-04-26T04:57:48,867Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:57:48,927Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:57:48,934Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:57:51,063Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:57:51,601Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:57:51,604Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:51,629Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:51,751Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:51,754Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:51,960Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:57:51,968Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T04:57:52,074Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T04:57:52,282Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F673B8AF70DB86D722047D506E5DA8C5BAC41FF9A665D7847E524DFA5EB51F91, not inserting the second time {}
[INFO ] 2019-04-26T04:57:52,356Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:52,378Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:57:52,380Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:52,381Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:52,383Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:57:52,385Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:52,390Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:57:52,392Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:57:52,419Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T04:57:52,433Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@33ce766b {}
[INFO ] 2019-04-26T04:57:52,445Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:57:52,447Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:57:52,450Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:57:52,632Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:57:52,643Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:57:52,645Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:52,651Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:52,658Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:52,660Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:52,724Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:57:52,726Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T04:57:52,746Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 7ACEF3DD4B727166B49FDA150D2FDF86206A9646D0C3417E8B345CF5E5BDA41E, not inserting the second time {}
[INFO ] 2019-04-26T04:57:52,755Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:52,759Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:52,771Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:52,773Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:52,777Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:52,789Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:52,791Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:52,800Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:57:52,801Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:52,803Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:52,807Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:57:52,813Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:52,817Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:57:52,821Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:57:52,848Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T04:57:52,862Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@411b4a70 {}
[INFO ] 2019-04-26T04:57:52,881Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:57:52,883Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:57:52,885Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:57:53,016Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:57:53,030Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:57:53,033Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,045Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:53,053Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,055Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,122Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:57:53,127Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T04:57:53,147Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3465BDFE34713E45DA0896B79D9CDF47E97A85EE8F1A4443A63D39AB076E3135, not inserting the second time {}
[INFO ] 2019-04-26T04:57:53,157Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:53,160Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:53,170Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:53,172Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,175Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:53,185Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,187Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:53,190Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:53,203Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:53,204Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,207Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:53,220Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,223Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,233Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:57:53,237Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,242Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,244Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:57:53,245Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,248Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:57:53,250Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:57:53,275Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T04:57:53,291Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@713d2fe8 {}
[INFO ] 2019-04-26T04:57:53,304Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:57:53,308Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:57:53,313Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:57:53,465Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:57:53,492Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:57:53,497Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,505Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:53,518Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,520Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,577Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:57:53,579Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T04:57:53,601Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 99C36D5344F02BFE99E7F32EE6F9F2616FA9AE3BE08D26AA92ADDA02ED8CB83B, not inserting the second time {}
[INFO ] 2019-04-26T04:57:53,618Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:53,621Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:53,633Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254671604) {}
[INFO ] 2019-04-26T04:57:53,634Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,637Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:53,648Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,650Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:53,653Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:53,671Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254672645) {}
[INFO ] 2019-04-26T04:57:53,673Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,676Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:53,685Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,687Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,691Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:53,707Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254673033) {}
[INFO ] 2019-04-26T04:57:53,709Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,713Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:57:53,732Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,734Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,743Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:57:53,746Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,748Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,750Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:57:53,753Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254673497) {}
[INFO ] 2019-04-26T04:57:53,782Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T04:57:53,784Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T04:57:53,787Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T04:57:54,579Z [Mock network] flow.[716659d8-eb71-44b6-90e2-2c6206483349].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4432374925102814502). {}
[INFO ] 2019-04-26T04:57:54,740Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4432374925102814502). {invocation_id=2d55e9ff-eb85-42de-b2eb-a8879689db23, invocation_timestamp=2019-04-26T04:57:54.732Z, session_id=2d55e9ff-eb85-42de-b2eb-a8879689db23, session_timestamp=2019-04-26T04:57:54.732Z}
[INFO ] 2019-04-26T04:57:54,989Z [Mock network] flow.[716659d8-eb71-44b6-90e2-2c6206483349].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3394167736077143882). {}
[INFO ] 2019-04-26T04:57:55,017Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3394167736077143882). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=5cf05e33-a133-4439-a0c8-6417014d3ec3, invocation_timestamp=2019-04-26T04:57:55.016Z, session_id=5cf05e33-a133-4439-a0c8-6417014d3ec3, session_timestamp=2019-04-26T04:57:55.016Z}
[INFO ] 2019-04-26T04:58:57,077Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-d100bf1d-2051-4d0a-a90e-33dc9b2571ac.jar {}
[INFO ] 2019-04-26T04:58:57,128Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-e0cbb32f-beea-44fa-8881-9c4c6b2ad9f3.jar {}
[INFO ] 2019-04-26T04:58:57,142Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-49345ee9-7d32-42f2-8933-8b127a9c1b54.jar {}
[INFO ] 2019-04-26T04:58:57,167Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-d100bf1d-2051-4d0a-a90e-33dc9b2571ac.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e0cbb32f-beea-44fa-8881-9c4c6b2ad9f3.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-49345ee9-7d32-42f2-8933-8b127a9c1b54.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T04:58:57,200Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:58:57,204Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:58:57,217Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-d100bf1d-2051-4d0a-a90e-33dc9b2571ac.jar {}
[INFO ] 2019-04-26T04:58:57,251Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e0cbb32f-beea-44fa-8881-9c4c6b2ad9f3.jar {}
[INFO ] 2019-04-26T04:58:57,264Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-49345ee9-7d32-42f2-8933-8b127a9c1b54.jar {}
[INFO ] 2019-04-26T04:58:57,411Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7be3a837 {}
[INFO ] 2019-04-26T04:58:58,161Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:58:58,209Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:58:58,214Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:59:00,477Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:59:01,022Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:59:01,025Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:01,039Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:01,157Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:01,159Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:01,352Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:59:01,359Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T04:59:01,458Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T04:59:01,668Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 90DE64D5B55B0F68A655906B138194351F578A64429B9E090F8392086A000AC0, not inserting the second time {}
[INFO ] 2019-04-26T04:59:01,746Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:01,771Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:59:01,774Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:01,776Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:01,777Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:59:01,779Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:01,784Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:59:01,786Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:59:01,816Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T04:59:01,835Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7cfe97db {}
[INFO ] 2019-04-26T04:59:01,849Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:59:01,851Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:59:01,854Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:59:02,031Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:59:02,040Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:59:02,042Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:02,048Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:02,056Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:02,057Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:02,118Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:59:02,120Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T04:59:02,143Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 322FE5ABBB4A797F09DA99269FAB0772F92CF78EF8D6DAEE821EF19506E740E4, not inserting the second time {}
[INFO ] 2019-04-26T04:59:02,156Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:02,160Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:02,172Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:02,174Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:02,177Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:02,187Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:02,190Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:02,202Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:59:02,206Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:02,210Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:02,213Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:59:02,214Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:02,218Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:59:02,220Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:59:02,251Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T04:59:02,265Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3949fcdc {}
[INFO ] 2019-04-26T04:59:02,280Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:59:02,285Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:59:02,288Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:59:02,432Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:59:02,448Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:59:02,452Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:02,460Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:02,468Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:02,469Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:02,535Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:59:02,537Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T04:59:02,556Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0F5F0969C16DAC75DA4347B1C9BF10779A6C36C01EF8E3BE8AAFD90CB27BD666, not inserting the second time {}
[INFO ] 2019-04-26T04:59:02,567Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:02,570Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:02,580Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:02,581Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:02,584Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:02,596Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:02,597Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:02,600Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:02,621Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:02,623Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:02,626Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:02,637Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:02,639Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:02,646Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:59:02,647Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:02,649Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:02,650Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:59:02,652Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:02,661Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T04:59:02,663Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T04:59:02,686Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T04:59:02,700Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@426ead99 {}
[INFO ] 2019-04-26T04:59:02,720Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T04:59:02,722Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:59:02,723Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:59:02,847Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T04:59:02,867Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T04:59:02,871Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:02,879Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:02,889Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:02,892Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:02,959Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T04:59:02,961Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T04:59:02,982Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9DB4AB7DE4122730CEF445D3477FA5F69F9E2D135E70341783CCAF63B312B899, not inserting the second time {}
[INFO ] 2019-04-26T04:59:02,989Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:02,991Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:03,000Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556254741024) {}
[INFO ] 2019-04-26T04:59:03,003Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:03,005Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:03,018Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:03,019Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:03,022Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:03,034Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556254742042) {}
[INFO ] 2019-04-26T04:59:03,036Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:03,038Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:03,048Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:03,049Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:03,056Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:03,067Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556254742452) {}
[INFO ] 2019-04-26T04:59:03,068Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:03,071Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T04:59:03,085Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:03,086Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:03,095Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:59:03,097Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:03,100Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:03,102Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T04:59:03,105Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556254742871) {}
[INFO ] 2019-04-26T04:59:03,133Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T04:59:03,136Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T04:59:03,139Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T04:59:03,974Z [Mock network] flow.[65e87070-8371-492d-ac8e-b993d5ab9c50].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3146296251187697278). {}
[INFO ] 2019-04-26T04:59:04,134Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3146296251187697278). {invocation_id=d3689b50-095c-4df9-acc8-46736c2c4d16, invocation_timestamp=2019-04-26T04:59:04.122Z, session_id=d3689b50-095c-4df9-acc8-46736c2c4d16, session_timestamp=2019-04-26T04:59:04.122Z}
[INFO ] 2019-04-26T04:59:04,396Z [Mock network] flow.[65e87070-8371-492d-ac8e-b993d5ab9c50].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=39877923967150009). {}
[INFO ] 2019-04-26T04:59:04,419Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=39877923967150009). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=914c237a-a5bc-427f-b035-60ac4871925e, invocation_timestamp=2019-04-26T04:59:04.418Z, session_id=914c237a-a5bc-427f-b035-60ac4871925e, session_timestamp=2019-04-26T04:59:04.418Z}
[INFO ] 2019-04-26T04:59:04,488Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.BondState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-26T06:05:02,865Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-8b1ea1e6-2c5c-4158-b503-57d33013bd7f.jar {}
[INFO ] 2019-04-26T06:05:02,914Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-ee4dc8cd-1340-4c5e-b2ba-85db64d79c32.jar {}
[INFO ] 2019-04-26T06:05:02,929Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-6af5d003-19e8-4072-bb7f-c4c16951530f.jar {}
[INFO ] 2019-04-26T06:05:02,954Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-8b1ea1e6-2c5c-4158-b503-57d33013bd7f.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ee4dc8cd-1340-4c5e-b2ba-85db64d79c32.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-6af5d003-19e8-4072-bb7f-c4c16951530f.jar, rootPackageName=null) {}
[INFO ] 2019-04-26T06:05:02,990Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T06:05:02,995Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T06:05:03,011Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-8b1ea1e6-2c5c-4158-b503-57d33013bd7f.jar {}
[INFO ] 2019-04-26T06:05:03,043Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ee4dc8cd-1340-4c5e-b2ba-85db64d79c32.jar {}
[INFO ] 2019-04-26T06:05:03,069Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/All_work/Senior_project/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-6af5d003-19e8-4072-bb7f-c4c16951530f.jar {}
[INFO ] 2019-04-26T06:05:03,209Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7be3a837 {}
[INFO ] 2019-04-26T06:05:04,006Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T06:05:04,049Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T06:05:04,056Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T06:05:06,733Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T06:05:07,321Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T06:05:07,323Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:07,340Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:07,458Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:07,461Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:07,653Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T06:05:07,659Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-26T06:05:07,768Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-26T06:05:07,965Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0C4A397B3C1F738A4101752CD9DD496BBF01CD05B7D32FD58FEA908A4EEE7EE3, not inserting the second time {}
[INFO ] 2019-04-26T06:05:08,039Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:08,068Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T06:05:08,070Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:08,072Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:08,074Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T06:05:08,076Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:08,082Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T06:05:08,084Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T06:05:08,105Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T06:05:08,118Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@33ce766b {}
[INFO ] 2019-04-26T06:05:08,131Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T06:05:08,133Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T06:05:08,135Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T06:05:08,323Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T06:05:08,335Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T06:05:08,337Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:08,343Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:08,351Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:08,354Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:08,415Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T06:05:08,417Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T06:05:08,437Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 20E78278B5DFC4902A75859C679717E2F6BFB2771F69E8D165EAA4232C92183E, not inserting the second time {}
[INFO ] 2019-04-26T06:05:08,446Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:08,452Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:08,466Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:08,467Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:08,470Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:08,483Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:08,485Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:08,496Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T06:05:08,498Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:08,499Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:08,502Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T06:05:08,504Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:08,511Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T06:05:08,514Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T06:05:08,537Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T06:05:08,551Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@411b4a70 {}
[INFO ] 2019-04-26T06:05:08,569Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T06:05:08,572Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T06:05:08,575Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T06:05:08,716Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T06:05:08,727Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T06:05:08,731Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:08,737Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:08,747Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:08,752Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:08,820Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T06:05:08,823Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T06:05:08,842Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3210C2AE27A2F99D2B1C14F1B8BB9AC5CB87B0E203BAC1EF13B89B939D35F761, not inserting the second time {}
[INFO ] 2019-04-26T06:05:08,852Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:08,857Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:08,869Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:08,871Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:08,874Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:08,886Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:08,888Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:08,891Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:08,902Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:08,903Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:08,906Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:08,917Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:08,919Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:08,926Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T06:05:08,929Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:08,931Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:08,933Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T06:05:08,934Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:08,939Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-26T06:05:08,942Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-26T06:05:08,966Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-26T06:05:08,981Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@713d2fe8 {}
[INFO ] 2019-04-26T06:05:08,996Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-26T06:05:08,999Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T06:05:09,003Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T06:05:09,122Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-26T06:05:09,141Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-26T06:05:09,146Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,152Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:09,164Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,169Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,248Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment E16B8E463F340CAFBB8781D2BA1CCBBA8469897229599D3E7DD65A8362A70DFB {}
[WARN ] 2019-04-26T06:05:09,250Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-26T06:05:09,270Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1B40B7E30B50B4C1ADB3BB460DB3CC3FA10DD36E719AA57A5494C456A3CD9D52, not inserting the second time {}
[INFO ] 2019-04-26T06:05:09,280Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:09,283Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:09,293Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556258707323) {}
[INFO ] 2019-04-26T06:05:09,295Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,298Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:09,307Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,309Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:09,312Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:09,324Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556258708337) {}
[INFO ] 2019-04-26T06:05:09,327Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,331Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:09,348Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,350Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:09,354Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:09,371Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556258708731) {}
[INFO ] 2019-04-26T06:05:09,373Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,376Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-26T06:05:09,395Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,398Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,405Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T06:05:09,408Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,410Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,412Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-26T06:05:09,414Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556258709146) {}
[INFO ] 2019-04-26T06:05:09,440Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T06:05:09,441Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T06:05:09,444Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow$Initiator to initiate com.example.flow.BondFlow$Acceptor (version 1) {}
[INFO ] 2019-04-26T06:05:10,260Z [Mock network] flow.[51df6d59-79de-4094-84d9-606e4a96b562].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3921232954324256152). {}
[INFO ] 2019-04-26T06:05:10,429Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3921232954324256152). {invocation_id=47a5ab6c-d521-4089-bbc2-db0288b86f4f, invocation_timestamp=2019-04-26T06:05:10.421Z, session_id=47a5ab6c-d521-4089-bbc2-db0288b86f4f, session_timestamp=2019-04-26T06:05:10.421Z}
[INFO ] 2019-04-26T06:05:10,689Z [Mock network] flow.[51df6d59-79de-4094-84d9-606e4a96b562].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-5317334901690590172). {}
[INFO ] 2019-04-26T06:05:10,718Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-5317334901690590172). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=caa89fa2-ae1e-4149-a20c-6ee18e1ceb98, invocation_timestamp=2019-04-26T06:05:10.717Z, session_id=caa89fa2-ae1e-4149-a20c-6ee18e1ceb98, session_timestamp=2019-04-26T06:05:10.717Z}
[INFO ] 2019-04-26T06:05:10,781Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.BondState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
