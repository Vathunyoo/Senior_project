[INFO ] 2019-05-04T09:12:03,445Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-67a4fced-de31-4844-bec6-854e2cb8581f.jar {}
[INFO ] 2019-05-04T09:12:03,514Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-89496428-42a9-4557-9cd9-2a1dfd6b4d95.jar {}
[INFO ] 2019-05-04T09:12:03,531Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-483cea4a-1e8b-4343-a28f-b79b427e825b.jar {}
[INFO ] 2019-05-04T09:12:03,550Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-67a4fced-de31-4844-bec6-854e2cb8581f.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-89496428-42a9-4557-9cd9-2a1dfd6b4d95.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-483cea4a-1e8b-4343-a28f-b79b427e825b.jar, rootPackageName=null) {}
[INFO ] 2019-05-04T09:12:03,567Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:12:03,571Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:12:03,587Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-67a4fced-de31-4844-bec6-854e2cb8581f.jar {}
[INFO ] 2019-05-04T09:12:03,620Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-89496428-42a9-4557-9cd9-2a1dfd6b4d95.jar {}
[INFO ] 2019-05-04T09:12:03,644Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-483cea4a-1e8b-4343-a28f-b79b427e825b.jar {}
[INFO ] 2019-05-04T09:12:03,808Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@51f18e31 {}
[INFO ] 2019-05-04T09:12:04,197Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:12:04,229Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:12:04,235Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:12:05,568Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:12:05,844Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:12:05,847Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961125846) {}
[INFO ] 2019-05-04T09:12:05,862Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:12:05,965Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961125846) {}
[INFO ] 2019-05-04T09:12:05,967Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961125846) {}
[INFO ] 2019-05-04T09:12:06,099Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:12:06,107Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-04T09:12:06,174Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-05-04T09:12:06,294Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 878E39E31F50296CC8792BA19FBA6CFCB693A646AEFB6AA3F4B5BA14C4A0EE7A, not inserting the second time {}
[INFO ] 2019-05-04T09:13:32,669Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-d46882d7-9da1-45d9-b5a2-7f01035adf9a.jar {}
[INFO ] 2019-05-04T09:13:32,725Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-aefa4d64-d810-4e2f-bc53-a327de68d94e.jar {}
[INFO ] 2019-05-04T09:13:32,740Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-668bfa6e-c0de-4cc7-b3b0-a2e14e2ee057.jar {}
[INFO ] 2019-05-04T09:13:32,776Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-d46882d7-9da1-45d9-b5a2-7f01035adf9a.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-aefa4d64-d810-4e2f-bc53-a327de68d94e.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-668bfa6e-c0de-4cc7-b3b0-a2e14e2ee057.jar, rootPackageName=null) {}
[INFO ] 2019-05-04T09:13:32,808Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:13:32,811Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:13:32,824Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-d46882d7-9da1-45d9-b5a2-7f01035adf9a.jar {}
[INFO ] 2019-05-04T09:13:32,854Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-aefa4d64-d810-4e2f-bc53-a327de68d94e.jar {}
[INFO ] 2019-05-04T09:13:32,879Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-668bfa6e-c0de-4cc7-b3b0-a2e14e2ee057.jar {}
[INFO ] 2019-05-04T09:13:33,114Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@48861d1 {}
[INFO ] 2019-05-04T09:13:33,841Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:13:33,883Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:13:33,888Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:13:36,225Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:13:36,771Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:13:36,774Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:36,786Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:36,882Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:36,884Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:37,090Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:13:37,096Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-04T09:13:37,205Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-05-04T09:13:37,451Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 04BC3CE6FADD4B4C22CB6CB82236113CBF5C42A0C421EE7025C0D6F3DDD1B413, not inserting the second time {}
[INFO ] 2019-05-04T09:13:37,540Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:37,566Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:13:37,569Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:37,571Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:37,573Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:13:37,576Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:37,583Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:13:37,584Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:13:37,608Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:13:37,621Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7e6c990f {}
[INFO ] 2019-05-04T09:13:37,634Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:13:37,639Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:13:37,641Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:13:37,814Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:13:37,830Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:13:37,833Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:37,846Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:37,856Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:37,858Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:37,924Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:13:37,926Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:13:37,946Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FDB0DADAA8CFC465389982CF923A5D55513354B96448D0E8D09B134539D406B7, not inserting the second time {}
[INFO ] 2019-05-04T09:13:37,973Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:37,987Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:38,006Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:38,008Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:38,015Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:38,043Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:38,047Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:38,055Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:13:38,058Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:38,061Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:38,063Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:13:38,065Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:38,069Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:13:38,073Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:13:38,117Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:13:38,132Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6571c72e {}
[INFO ] 2019-05-04T09:13:38,183Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:13:38,194Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:13:38,202Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:13:38,587Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:13:38,603Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:13:38,606Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:38,613Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:38,620Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:38,623Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:38,681Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:13:38,683Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:13:38,704Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 12F75B05606302138352B308E971B6E0D3958B2B4BB8010999573970C9BAE432, not inserting the second time {}
[INFO ] 2019-05-04T09:13:38,714Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:38,718Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:38,740Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:38,744Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:38,752Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:38,768Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:38,770Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:38,775Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:38,802Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:38,807Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:38,814Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:38,831Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:38,833Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:38,840Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:13:38,842Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:38,843Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:38,845Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:13:38,846Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:38,862Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:13:38,864Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:13:38,891Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:13:38,907Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@45e38356 {}
[INFO ] 2019-05-04T09:13:38,917Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:13:38,918Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:13:38,920Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:13:39,069Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:13:39,089Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:13:39,092Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,100Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:39,106Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,108Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,169Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:13:39,171Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:13:39,198Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C9AF64DBC8750C46DC8304A354D3A1D883018C95E916BFD0A534926B0402436E, not inserting the second time {}
[INFO ] 2019-05-04T09:13:39,209Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:39,216Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:39,232Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961216774) {}
[INFO ] 2019-05-04T09:13:39,234Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,237Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:39,248Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,250Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:39,257Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:39,266Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961217833) {}
[INFO ] 2019-05-04T09:13:39,268Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,270Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:39,279Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,281Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:39,284Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:39,297Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961218606) {}
[INFO ] 2019-05-04T09:13:39,298Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,301Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:13:39,313Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,315Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,320Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:13:39,321Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,324Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,325Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:13:39,327Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961219092) {}
[INFO ] 2019-05-04T09:13:39,345Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:13:39,346Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:13:39,347Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:13:40,237Z [Mock network] flow.[cc25df0b-56c1-46d9-9a67-a5993813f247].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=1202959560075668536). {}
[INFO ] 2019-05-04T09:13:40,419Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=1202959560075668536). {invocation_id=7c393827-a693-496b-a131-06fa297fef46, invocation_timestamp=2019-05-04T09:13:40.412Z, session_id=7c393827-a693-496b-a131-06fa297fef46, session_timestamp=2019-05-04T09:13:40.412Z}
[INFO ] 2019-05-04T09:13:40,743Z [Mock network] flow.[cc25df0b-56c1-46d9-9a67-a5993813f247].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=6126132611997241401). {}
[INFO ] 2019-05-04T09:13:40,768Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=6126132611997241401). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=3cd7eb8b-89bd-4d34-979f-655915a55f2f, invocation_timestamp=2019-05-04T09:13:40.767Z, session_id=3cd7eb8b-89bd-4d34-979f-655915a55f2f, session_timestamp=2019-05-04T09:13:40.767Z}
[INFO ] 2019-05-04T09:13:40,842Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.LinearState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-05-04T09:21:37,010Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-af488e8c-eaf2-4d1b-a2fc-3453108cb962.jar {}
[INFO ] 2019-05-04T09:21:37,070Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-e13c4507-bbb1-4def-9a4f-b516a63dde29.jar {}
[INFO ] 2019-05-04T09:21:37,087Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-c348f637-f05f-4699-b978-de2ac212631b.jar {}
[INFO ] 2019-05-04T09:21:37,114Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-af488e8c-eaf2-4d1b-a2fc-3453108cb962.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e13c4507-bbb1-4def-9a4f-b516a63dde29.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-c348f637-f05f-4699-b978-de2ac212631b.jar, rootPackageName=null) {}
[INFO ] 2019-05-04T09:21:37,151Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:21:37,156Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:21:37,172Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-af488e8c-eaf2-4d1b-a2fc-3453108cb962.jar {}
[INFO ] 2019-05-04T09:21:37,203Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e13c4507-bbb1-4def-9a4f-b516a63dde29.jar {}
[INFO ] 2019-05-04T09:21:37,223Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-c348f637-f05f-4699-b978-de2ac212631b.jar {}
[INFO ] 2019-05-04T09:21:37,385Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@53fb3e1b {}
[INFO ] 2019-05-04T09:21:38,112Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:21:38,151Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:21:38,156Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:21:40,276Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:21:40,804Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:21:40,807Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:40,825Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:40,927Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:40,930Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:41,123Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:21:41,130Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-04T09:21:41,243Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-05-04T09:21:41,497Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key DA8197A1241465134C76FCB455A5E4C4445ABC98713E258368E10F296C24337C, not inserting the second time {}
[INFO ] 2019-05-04T09:21:41,592Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:41,620Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:21:41,623Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:41,628Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:41,630Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:21:41,632Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:41,639Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:21:41,643Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:21:41,667Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:21:41,678Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6aef33f6 {}
[INFO ] 2019-05-04T09:21:41,692Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:21:41,696Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:21:41,698Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:21:41,944Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:21:41,955Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:21:41,958Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:41,964Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:41,974Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:41,982Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:42,051Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:21:42,054Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:21:42,080Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 85F1E2E2D6055EFF2C0453836D7317E691D75B61FD55147B61356A5C9D0982C8, not inserting the second time {}
[INFO ] 2019-05-04T09:21:42,093Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:42,098Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:42,111Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:42,113Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:42,116Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:42,127Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:42,128Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:42,136Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:21:42,140Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:42,141Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:42,144Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:21:42,147Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:42,150Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:21:42,152Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:21:42,184Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:21:42,201Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@79ca51cb {}
[INFO ] 2019-05-04T09:21:42,225Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:21:42,230Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:21:42,239Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:21:42,482Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:21:42,494Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:21:42,496Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:42,501Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:42,508Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:42,510Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:42,568Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:21:42,570Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:21:42,590Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 07B52B854E95025E848C934374895B48BB000D7E121339D36E92ADCC798088D5, not inserting the second time {}
[INFO ] 2019-05-04T09:21:42,598Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:42,601Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:42,612Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:42,613Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:42,616Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:42,627Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:42,629Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:42,631Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:42,646Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:42,647Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:42,650Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:42,675Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:42,677Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:42,684Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:21:42,686Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:42,690Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:42,692Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:21:42,695Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:42,699Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:21:42,700Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:21:42,733Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:21:42,749Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6c54bc3 {}
[INFO ] 2019-05-04T09:21:42,767Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:21:42,769Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:21:42,770Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:21:42,932Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:21:42,967Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:21:42,970Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:42,976Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:42,987Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:42,988Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:43,039Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:21:43,041Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:21:43,062Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6F41999270106A7CD06C4A4EF6C90964855CBBB0322574777F6C19FAD07B25C4, not inserting the second time {}
[INFO ] 2019-05-04T09:21:43,069Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:43,072Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:43,083Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961700807) {}
[INFO ] 2019-05-04T09:21:43,086Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:43,090Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:43,102Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:43,103Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:43,108Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:43,127Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961701958) {}
[INFO ] 2019-05-04T09:21:43,129Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:43,133Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:43,151Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:43,153Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:43,161Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:43,175Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961702496) {}
[INFO ] 2019-05-04T09:21:43,177Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:43,182Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:21:43,195Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:43,196Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:43,202Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:21:43,204Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:43,207Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:43,208Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:21:43,209Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961702970) {}
[INFO ] 2019-05-04T09:21:43,226Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:21:43,227Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:21:43,228Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:21:44,032Z [Mock network] flow.[4a0714fd-1557-42ee-b609-9142fa179dac].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4307500124747538137). {}
[INFO ] 2019-05-04T09:21:44,183Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4307500124747538137). {invocation_id=171ad6d1-9685-45af-8997-a73aab5ef128, invocation_timestamp=2019-05-04T09:21:44.175Z, session_id=171ad6d1-9685-45af-8997-a73aab5ef128, session_timestamp=2019-05-04T09:21:44.175Z}
[INFO ] 2019-05-04T09:21:44,442Z [Mock network] flow.[4a0714fd-1557-42ee-b609-9142fa179dac].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=645329533968123886). {}
[INFO ] 2019-05-04T09:21:44,477Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=645329533968123886). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=7e1b6a10-0461-423a-9b4a-57ce4a979fab, invocation_timestamp=2019-05-04T09:21:44.476Z, session_id=7e1b6a10-0461-423a-9b4a-57ce4a979fab, session_timestamp=2019-05-04T09:21:44.476Z}
[INFO ] 2019-05-04T09:21:44,549Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.LinearState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-05-04T09:25:11,514Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-7f166918-b853-4ee0-8cc4-6d11ee18ae40.jar {}
[INFO ] 2019-05-04T09:25:11,566Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-1c473944-9ea4-48c4-bdee-799d94bdfa8f.jar {}
[INFO ] 2019-05-04T09:25:11,585Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-2b0daacb-60a9-40e8-94f7-ea352616febe.jar {}
[INFO ] 2019-05-04T09:25:11,609Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-7f166918-b853-4ee0-8cc4-6d11ee18ae40.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-1c473944-9ea4-48c4-bdee-799d94bdfa8f.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-2b0daacb-60a9-40e8-94f7-ea352616febe.jar, rootPackageName=null) {}
[INFO ] 2019-05-04T09:25:11,638Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:25:11,640Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:25:11,653Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-7f166918-b853-4ee0-8cc4-6d11ee18ae40.jar {}
[INFO ] 2019-05-04T09:25:11,684Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-1c473944-9ea4-48c4-bdee-799d94bdfa8f.jar {}
[INFO ] 2019-05-04T09:25:11,710Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-2b0daacb-60a9-40e8-94f7-ea352616febe.jar {}
[INFO ] 2019-05-04T09:25:11,861Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7be3a837 {}
[INFO ] 2019-05-04T09:25:12,616Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:25:12,656Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:25:12,662Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:25:14,790Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:25:15,356Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:25:15,362Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:15,377Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:15,492Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:15,495Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:15,688Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:25:15,696Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-04T09:25:15,804Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-05-04T09:25:16,041Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 2683104B55EC3BEA2038E9CA293FF6150E4B1C8EC7035E03E49A436858326EE0, not inserting the second time {}
[INFO ] 2019-05-04T09:25:16,124Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:16,150Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:25:16,152Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:16,155Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:16,157Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:25:16,159Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:16,165Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:25:16,169Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:25:16,194Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:25:16,207Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5390bdee {}
[INFO ] 2019-05-04T09:25:16,225Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:25:16,228Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:25:16,232Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:25:16,430Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:25:16,441Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:25:16,443Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:16,448Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:16,455Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:16,464Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:16,539Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:25:16,542Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:25:16,566Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 7A86D7F2BFEC0B6AA23B0CBC8C48BDDDFFD6BB41D4A85A12BF947335D8E27FAB, not inserting the second time {}
[INFO ] 2019-05-04T09:25:16,575Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:16,580Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:16,598Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:16,600Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:16,603Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:16,615Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:16,616Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:16,623Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:25:16,625Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:16,626Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:16,628Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:25:16,630Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:16,634Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:25:16,637Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:25:16,657Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:25:16,668Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4bafe92f {}
[INFO ] 2019-05-04T09:25:16,684Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:25:16,691Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:25:16,698Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:25:16,939Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:25:16,957Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:25:16,960Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:16,968Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:16,976Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:16,981Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:17,046Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:25:17,050Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:25:17,070Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E57C80D4A708756DAAD45BF487AC36352B250DB1C6BAB02FF11341B6E327F7C2, not inserting the second time {}
[INFO ] 2019-05-04T09:25:17,083Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:17,089Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:17,104Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:17,106Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:17,108Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:17,135Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:17,139Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:17,143Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:17,189Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:17,191Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:17,196Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:17,217Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:17,220Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:17,232Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:25:17,236Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:17,238Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:17,240Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:25:17,242Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:17,249Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:25:17,253Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:25:17,279Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:25:17,291Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@a28296e {}
[INFO ] 2019-05-04T09:25:17,309Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:25:17,312Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:25:17,315Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:25:17,514Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:25:17,532Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:25:17,534Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,541Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:17,547Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,549Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,607Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:25:17,609Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:25:17,629Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D3304A70B7F7F016E591D5D3FDA38A42303999D68359067A74125954713D04F8, not inserting the second time {}
[INFO ] 2019-05-04T09:25:17,636Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:17,639Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:17,650Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556961915361) {}
[INFO ] 2019-05-04T09:25:17,652Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,654Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:17,664Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,666Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:17,669Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:17,679Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556961916443) {}
[INFO ] 2019-05-04T09:25:17,681Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,685Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:17,700Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,704Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:17,707Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:17,722Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556961916960) {}
[INFO ] 2019-05-04T09:25:17,723Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,729Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:25:17,747Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,749Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,757Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:25:17,759Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,765Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,767Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:25:17,769Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556961917534) {}
[INFO ] 2019-05-04T09:25:17,792Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:25:17,794Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:25:17,797Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:25:18,668Z [Mock network] flow.[bfd5ab87-6748-4461-ab5f-bed0a7409fb4].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=702013658980299577). {}
[INFO ] 2019-05-04T09:25:18,848Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=702013658980299577). {invocation_id=0d6fb431-722a-46a6-83d3-ac3beabd0144, invocation_timestamp=2019-05-04T09:25:18.838Z, session_id=0d6fb431-722a-46a6-83d3-ac3beabd0144, session_timestamp=2019-05-04T09:25:18.838Z}
[INFO ] 2019-05-04T09:25:19,109Z [Mock network] flow.[bfd5ab87-6748-4461-ab5f-bed0a7409fb4].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7650468221176799293). {}
[INFO ] 2019-05-04T09:25:19,139Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7650468221176799293). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=60504981-ea14-4b77-9b2c-aa0595246202, invocation_timestamp=2019-05-04T09:25:19.138Z, session_id=60504981-ea14-4b77-9b2c-aa0595246202, session_timestamp=2019-05-04T09:25:19.138Z}
[INFO ] 2019-05-04T09:25:19,210Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.LinearState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-05-04T09:28:16,912Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-090cb86c-4e2d-4b3e-bb21-3cb3adca3b1f.jar {}
[INFO ] 2019-05-04T09:28:16,959Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-82f4108d-f90e-4922-af13-d34a578adc23.jar {}
[INFO ] 2019-05-04T09:28:16,975Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-7a952c47-8d32-468e-8200-af022f9869d7.jar {}
[INFO ] 2019-05-04T09:28:17,002Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-090cb86c-4e2d-4b3e-bb21-3cb3adca3b1f.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-82f4108d-f90e-4922-af13-d34a578adc23.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-7a952c47-8d32-468e-8200-af022f9869d7.jar, rootPackageName=null) {}
[INFO ] 2019-05-04T09:28:17,035Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:28:17,038Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:28:17,052Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-090cb86c-4e2d-4b3e-bb21-3cb3adca3b1f.jar {}
[INFO ] 2019-05-04T09:28:17,083Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-82f4108d-f90e-4922-af13-d34a578adc23.jar {}
[INFO ] 2019-05-04T09:28:17,111Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-7a952c47-8d32-468e-8200-af022f9869d7.jar {}
[INFO ] 2019-05-04T09:28:17,247Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7be3a837 {}
[INFO ] 2019-05-04T09:28:18,052Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:28:18,096Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:28:18,102Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:28:20,381Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:28:21,039Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:28:21,045Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:21,068Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:21,224Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:21,228Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:21,451Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:28:21,457Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-04T09:28:21,573Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-05-04T09:28:21,773Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A515208BC4B4DB809797176ABACF8AE0691961BD3E57AB66D3225BC4B675CA48, not inserting the second time {}
[INFO ] 2019-05-04T09:28:21,848Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:21,879Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:28:21,883Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:21,885Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:21,887Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:28:21,889Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:21,895Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:28:21,897Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:28:21,918Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:28:21,927Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5390bdee {}
[INFO ] 2019-05-04T09:28:21,941Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:28:21,943Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:28:21,945Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:28:22,132Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:28:22,143Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:28:22,145Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:22,151Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:22,157Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:22,159Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:22,217Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:28:22,220Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:28:22,241Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D028E899051E28608AF0B78287269D327614BDF6F1FDCAC334F702BEE3620AD2, not inserting the second time {}
[INFO ] 2019-05-04T09:28:22,249Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:22,254Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:22,275Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:22,277Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:22,281Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:22,295Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:22,297Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:22,303Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:28:22,305Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:22,307Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:22,312Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:28:22,315Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:22,320Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:28:22,325Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:28:22,353Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:28:22,374Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@12445241 {}
[INFO ] 2019-05-04T09:28:22,393Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:28:22,397Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:28:22,401Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:28:22,542Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:28:22,559Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:28:22,561Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:22,570Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:22,580Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:22,586Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:22,643Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:28:22,645Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:28:22,663Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 7311C5FB2A4FBC42308602A6CD4AE86AF775C164766A3C068E90A8930D4CB4CB, not inserting the second time {}
[INFO ] 2019-05-04T09:28:22,672Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:22,675Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:22,693Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:22,695Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:22,700Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:22,709Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:22,711Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:22,714Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:22,725Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:22,727Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:22,730Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:22,740Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:22,742Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:22,752Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:28:22,755Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:22,758Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:22,759Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:28:22,760Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:22,765Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:28:22,768Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:28:22,803Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:28:22,817Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@63d93e91 {}
[INFO ] 2019-05-04T09:28:22,834Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:28:22,837Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:28:22,839Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:28:22,966Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:28:23,008Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:28:23,012Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,019Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:23,029Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,031Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,094Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:28:23,096Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:28:23,117Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D1C139D59ED809C514C318E945F05251CBB6CCCCF943B59211730BDA2DB11EBC, not inserting the second time {}
[INFO ] 2019-05-04T09:28:23,125Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:23,127Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:23,137Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962101044) {}
[INFO ] 2019-05-04T09:28:23,139Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,141Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:23,152Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,153Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:23,156Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:23,169Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962102145) {}
[INFO ] 2019-05-04T09:28:23,171Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,174Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:23,182Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,184Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:23,189Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:23,207Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962102561) {}
[INFO ] 2019-05-04T09:28:23,211Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,217Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:28:23,229Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,232Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,241Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:28:23,244Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,247Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,250Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:28:23,252Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962103012) {}
[INFO ] 2019-05-04T09:28:23,284Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:28:23,286Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:28:23,289Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:28:24,147Z [Mock network] flow.[357fa726-d603-40b1-b9ae-937278f05ced].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7199837621442640934). {}
[INFO ] 2019-05-04T09:28:24,306Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7199837621442640934). {invocation_id=d87d9cfb-ec7a-461c-8d7b-631d1afd361e, invocation_timestamp=2019-05-04T09:28:24.299Z, session_id=d87d9cfb-ec7a-461c-8d7b-631d1afd361e, session_timestamp=2019-05-04T09:28:24.299Z}
[INFO ] 2019-05-04T09:28:24,565Z [Mock network] flow.[357fa726-d603-40b1-b9ae-937278f05ced].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3692521598058621734). {}
[INFO ] 2019-05-04T09:28:24,597Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3692521598058621734). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=4636e593-ebeb-4fba-8926-98a250daaaaa, invocation_timestamp=2019-05-04T09:28:24.596Z, session_id=4636e593-ebeb-4fba-8926-98a250daaaaa, session_timestamp=2019-05-04T09:28:24.596Z}
[INFO ] 2019-05-04T09:28:24,672Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.LinearState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-05-04T09:34:37,343Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-ced9c5aa-59ca-4fea-b820-33fd99bb5bf8.jar {}
[INFO ] 2019-05-04T09:34:37,393Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-9a607465-bf7e-4fea-be3c-46310d9c0d56.jar {}
[INFO ] 2019-05-04T09:34:37,412Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-6d390b1b-1181-4c90-a52c-da49a247fadb.jar {}
[INFO ] 2019-05-04T09:34:37,437Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ced9c5aa-59ca-4fea-b820-33fd99bb5bf8.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-9a607465-bf7e-4fea-be3c-46310d9c0d56.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-6d390b1b-1181-4c90-a52c-da49a247fadb.jar, rootPackageName=null) {}
[INFO ] 2019-05-04T09:34:37,470Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:34:37,476Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:34:37,492Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ced9c5aa-59ca-4fea-b820-33fd99bb5bf8.jar {}
[INFO ] 2019-05-04T09:34:37,527Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-9a607465-bf7e-4fea-be3c-46310d9c0d56.jar {}
[INFO ] 2019-05-04T09:34:37,552Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-6d390b1b-1181-4c90-a52c-da49a247fadb.jar {}
[INFO ] 2019-05-04T09:34:37,692Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7be3a837 {}
[INFO ] 2019-05-04T09:34:38,388Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:34:38,432Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:34:38,438Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:34:40,380Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:34:40,918Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:34:40,921Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:40,933Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:41,044Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:41,047Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:41,260Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:34:41,269Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-04T09:34:41,375Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-05-04T09:34:41,578Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8DC7DF18AA2BE64D79581061FC2B9F919620523D90E91050E48B1BE46F6AAD64, not inserting the second time {}
[INFO ] 2019-05-04T09:34:41,669Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:41,697Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:34:41,699Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:41,701Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:41,703Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:34:41,705Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:41,712Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:34:41,714Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:34:41,736Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:34:41,750Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5390bdee {}
[INFO ] 2019-05-04T09:34:41,766Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:34:41,770Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:34:41,772Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:34:41,961Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:34:41,974Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:34:41,976Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:41,982Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:41,991Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:41,994Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:42,068Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:34:42,073Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:34:42,101Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1CAF26D74E4053D7869D608D5E807991A7417FE69BA06C587D395915800FEFF8, not inserting the second time {}
[INFO ] 2019-05-04T09:34:42,110Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:42,115Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:42,126Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:42,127Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:42,131Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:42,143Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:42,145Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:42,151Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:34:42,153Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:42,155Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:42,157Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:34:42,159Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:42,162Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:34:42,166Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:34:42,189Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:34:42,199Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@12445241 {}
[INFO ] 2019-05-04T09:34:42,215Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:34:42,219Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:34:42,224Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:34:42,395Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:34:42,408Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:34:42,410Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:42,417Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:42,430Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:42,435Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:42,508Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:34:42,510Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:34:42,532Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 93B3E63CB083EBDC3C1F48ED2CF29643005F5BFDAF385FD21AEF9F17AD097B84, not inserting the second time {}
[INFO ] 2019-05-04T09:34:42,541Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:42,544Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:42,555Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:42,557Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:42,560Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:42,570Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:42,572Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:42,574Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:42,589Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:42,591Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:42,593Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:42,604Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:42,606Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:42,613Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:34:42,618Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:42,624Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:42,625Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:34:42,628Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:42,634Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:34:42,636Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:34:42,668Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:34:42,684Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@63d93e91 {}
[INFO ] 2019-05-04T09:34:42,700Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:34:42,705Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:34:42,708Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:34:43,015Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:34:43,029Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:34:43,032Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,036Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:43,043Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,044Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,097Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:34:43,099Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:34:43,119Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key CCC3A5F9DA4CD09A9F2F66BFF21C5FA07817BB8A83C0D8B13C59AD974CD3C5F1, not inserting the second time {}
[INFO ] 2019-05-04T09:34:43,127Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:43,129Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:43,139Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962480921) {}
[INFO ] 2019-05-04T09:34:43,141Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,143Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:43,152Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,154Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:43,156Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:43,166Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962481976) {}
[INFO ] 2019-05-04T09:34:43,168Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,170Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:43,179Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,181Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:43,183Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:43,197Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962482410) {}
[INFO ] 2019-05-04T09:34:43,200Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,203Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:34:43,214Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,216Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,221Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:34:43,222Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,226Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,228Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:34:43,231Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962483032) {}
[INFO ] 2019-05-04T09:34:43,256Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:34:43,260Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:34:43,268Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:34:44,164Z [Mock network] flow.[d47f5695-65f7-4b60-9bd2-caa84d3b3d92].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4306136153543332321). {}
[INFO ] 2019-05-04T09:34:44,334Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4306136153543332321). {invocation_id=ab2014a5-124a-4bca-8b22-c7f31054c05d, invocation_timestamp=2019-05-04T09:34:44.325Z, session_id=ab2014a5-124a-4bca-8b22-c7f31054c05d, session_timestamp=2019-05-04T09:34:44.325Z}
[INFO ] 2019-05-04T09:34:44,576Z [Mock network] flow.[d47f5695-65f7-4b60-9bd2-caa84d3b3d92].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-9176239772412238586). {}
[INFO ] 2019-05-04T09:34:44,600Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-9176239772412238586). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=6da327af-1883-4eff-8c64-1105c2779583, invocation_timestamp=2019-05-04T09:34:44.599Z, session_id=6da327af-1883-4eff-8c64-1105c2779583, session_timestamp=2019-05-04T09:34:44.599Z}
[INFO ] 2019-05-04T09:34:44,675Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.LinearState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-05-04T09:37:35,324Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-880ead45-8fca-40f7-957c-598621c5ae1c.jar {}
[INFO ] 2019-05-04T09:37:35,373Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-f68fcd9c-1acd-440c-8d4d-d7f3a7e07f4a.jar {}
[INFO ] 2019-05-04T09:37:35,390Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-7bd755a4-3ef3-4158-84c0-34fd545179f2.jar {}
[INFO ] 2019-05-04T09:37:35,418Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-880ead45-8fca-40f7-957c-598621c5ae1c.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-f68fcd9c-1acd-440c-8d4d-d7f3a7e07f4a.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-7bd755a4-3ef3-4158-84c0-34fd545179f2.jar, rootPackageName=null) {}
[INFO ] 2019-05-04T09:37:35,450Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:37:35,456Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:37:35,472Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-880ead45-8fca-40f7-957c-598621c5ae1c.jar {}
[INFO ] 2019-05-04T09:37:35,504Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-f68fcd9c-1acd-440c-8d4d-d7f3a7e07f4a.jar {}
[INFO ] 2019-05-04T09:37:35,527Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-7bd755a4-3ef3-4158-84c0-34fd545179f2.jar {}
[INFO ] 2019-05-04T09:37:35,670Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7be3a837 {}
[INFO ] 2019-05-04T09:37:36,384Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:37:36,424Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:37:36,430Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:37:38,608Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:37:39,130Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:37:39,132Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:39,144Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:39,257Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:39,266Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:39,450Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:37:39,458Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-04T09:37:39,575Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-05-04T09:37:39,778Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8D5237393F78A3CA69FEC7F2D25A23F6003C735849ECD82E45BF3F398C95F4E0, not inserting the second time {}
[INFO ] 2019-05-04T09:37:39,856Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:39,882Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:37:39,884Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:39,886Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:39,888Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:37:39,890Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:39,895Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:37:39,897Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:37:39,927Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:37:39,941Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5390bdee {}
[INFO ] 2019-05-04T09:37:39,954Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:37:39,956Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:37:39,958Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:37:40,145Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:37:40,156Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:37:40,159Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:40,164Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:40,170Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:40,172Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:40,235Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:37:40,237Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:37:40,258Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 36EE33547A7F95FF58068E0DB9C554E37AEE559288703637149F073813374CAB, not inserting the second time {}
[INFO ] 2019-05-04T09:37:40,272Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:40,277Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:40,288Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:40,290Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:40,293Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:40,304Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:40,306Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:40,313Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:37:40,315Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:40,318Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:40,321Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:37:40,325Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:40,331Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:37:40,335Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:37:40,367Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:37:40,381Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@12445241 {}
[INFO ] 2019-05-04T09:37:40,402Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:37:40,405Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:37:40,407Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:37:40,587Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:37:40,606Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:37:40,608Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:40,617Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:40,631Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:40,635Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:40,698Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:37:40,700Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:37:40,720Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3B3426609EF0CC35F5772301E859FC4525EB4CCB4696452C68F300EB7F774BEA, not inserting the second time {}
[INFO ] 2019-05-04T09:37:40,731Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:40,735Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:40,752Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:40,754Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:40,759Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:40,776Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:40,778Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:40,785Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:40,803Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:40,805Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:40,809Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:40,825Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:40,827Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:40,838Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:37:40,840Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:40,842Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:40,843Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:37:40,846Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:40,851Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T09:37:40,853Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T09:37:40,870Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T09:37:40,879Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@63d93e91 {}
[INFO ] 2019-05-04T09:37:40,890Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T09:37:40,892Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:37:40,893Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:37:41,053Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T09:37:41,078Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T09:37:41,081Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,088Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:41,094Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,096Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,154Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T09:37:41,156Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T09:37:41,175Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 04F6EAA0BC5AB2C8BEB9E32C355292EB6005556315305F2D439D594C75D4E070, not inserting the second time {}
[INFO ] 2019-05-04T09:37:41,184Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:41,187Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:41,195Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556962659132) {}
[INFO ] 2019-05-04T09:37:41,197Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,199Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:41,209Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,211Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:41,213Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:41,224Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556962660159) {}
[INFO ] 2019-05-04T09:37:41,228Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,231Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:41,251Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,256Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:41,275Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:41,288Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556962660608) {}
[INFO ] 2019-05-04T09:37:41,291Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,296Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T09:37:41,318Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,320Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,328Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:37:41,331Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,334Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,336Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T09:37:41,338Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556962661081) {}
[INFO ] 2019-05-04T09:37:41,362Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:37:41,363Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:37:41,365Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T09:37:42,164Z [Mock network] flow.[e101d4a4-dd8f-463e-8105-c16a48d3f83c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2897259654920615729). {}
[INFO ] 2019-05-04T09:37:42,321Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2897259654920615729). {invocation_id=18552149-c07a-474e-8a12-c142ff60f53f, invocation_timestamp=2019-05-04T09:37:42.313Z, session_id=18552149-c07a-474e-8a12-c142ff60f53f, session_timestamp=2019-05-04T09:37:42.313Z}
[INFO ] 2019-05-04T09:37:42,565Z [Mock network] flow.[e101d4a4-dd8f-463e-8105-c16a48d3f83c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7036917784249686724). {}
[INFO ] 2019-05-04T09:37:42,597Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7036917784249686724). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=9689f8f9-f72a-4c55-ad3a-ce78394b4be1, invocation_timestamp=2019-05-04T09:37:42.595Z, session_id=9689f8f9-f72a-4c55-ad3a-ce78394b4be1, session_timestamp=2019-05-04T09:37:42.595Z}
[INFO ] 2019-05-04T09:37:42,671Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.LinearState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-05-04T10:51:48,138Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-3c13cade-deae-4f4a-b8d9-824227600aae.jar {}
[INFO ] 2019-05-04T10:51:48,189Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-b4d29be9-e2b4-40ef-b4c3-dea9cd28d750.jar {}
[INFO ] 2019-05-04T10:51:48,205Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-71494877-4a00-4be2-aa5d-046c9d435c58.jar {}
[INFO ] 2019-05-04T10:51:48,230Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3c13cade-deae-4f4a-b8d9-824227600aae.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-b4d29be9-e2b4-40ef-b4c3-dea9cd28d750.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-71494877-4a00-4be2-aa5d-046c9d435c58.jar, rootPackageName=null) {}
[INFO ] 2019-05-04T10:51:48,262Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T10:51:48,266Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T10:51:48,284Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3c13cade-deae-4f4a-b8d9-824227600aae.jar {}
[INFO ] 2019-05-04T10:51:48,308Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-b4d29be9-e2b4-40ef-b4c3-dea9cd28d750.jar {}
[INFO ] 2019-05-04T10:51:48,333Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-71494877-4a00-4be2-aa5d-046c9d435c58.jar {}
[INFO ] 2019-05-04T10:51:48,504Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@48861d1 {}
[INFO ] 2019-05-04T10:51:49,237Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T10:51:49,280Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T10:51:49,286Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T10:51:51,313Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T10:51:51,870Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T10:51:51,873Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:51,887Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:52,012Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:52,015Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:52,209Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T10:51:52,217Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-04T10:51:52,323Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-05-04T10:51:52,544Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1AD34FBD944A24B6B775CDF0CA4049714A814794BD245E69DE0F762C5771A1B0, not inserting the second time {}
[INFO ] 2019-05-04T10:51:52,623Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:52,649Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T10:51:52,651Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:52,653Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:52,655Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T10:51:52,657Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:52,663Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T10:51:52,681Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T10:51:52,706Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T10:51:52,718Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7e6c990f {}
[INFO ] 2019-05-04T10:51:52,730Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T10:51:52,733Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T10:51:52,735Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T10:51:53,002Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T10:51:53,023Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T10:51:53,030Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:53,038Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:53,048Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:53,050Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:53,111Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T10:51:53,115Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T10:51:53,135Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 442B032B1E56BF346B492798A72E0BB0DBA020724F673D0337852B06EB1476AC, not inserting the second time {}
[INFO ] 2019-05-04T10:51:53,146Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:53,151Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:53,163Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:53,165Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:53,170Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:53,183Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:53,185Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:53,191Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T10:51:53,193Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:53,194Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:53,197Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T10:51:53,198Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:53,202Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T10:51:53,204Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T10:51:53,236Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T10:51:53,252Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1145d71f {}
[INFO ] 2019-05-04T10:51:53,278Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T10:51:53,284Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T10:51:53,296Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T10:51:53,420Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T10:51:53,430Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T10:51:53,432Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:53,437Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:53,443Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:53,444Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:53,516Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T10:51:53,523Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T10:51:53,557Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 890F4DE60592A745CE5F2C9418775A2157C2B99E23E38C30D39792F0DB69C59C, not inserting the second time {}
[INFO ] 2019-05-04T10:51:53,570Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:53,575Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:53,592Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:53,594Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:53,599Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:53,612Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:53,615Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:53,618Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:53,631Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:53,635Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:53,638Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:53,649Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:53,651Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:53,658Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T10:51:53,661Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:53,663Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:53,665Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T10:51:53,667Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:53,674Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-04T10:51:53,678Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-04T10:51:53,706Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-04T10:51:53,720Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7882a4d8 {}
[INFO ] 2019-05-04T10:51:53,735Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-04T10:51:53,737Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T10:51:53,740Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T10:51:53,866Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-05-04T10:51:53,908Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-04T10:51:53,911Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:53,916Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:53,923Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:53,925Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:53,985Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 63CB62BB8E9326F97FD17B38061EBD0632D8238066F46496ED25FB6C760024E5 {}
[WARN ] 2019-05-04T10:51:53,986Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-05-04T10:51:54,003Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key DF263827FEDD6EAF562EE039F85F9747FC3AF6698CB974B345F00CF6C055E25C, not inserting the second time {}
[INFO ] 2019-05-04T10:51:54,010Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:54,012Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:54,023Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556967111873) {}
[INFO ] 2019-05-04T10:51:54,025Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:54,027Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:54,041Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:54,042Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:54,046Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:54,055Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556967113030) {}
[INFO ] 2019-05-04T10:51:54,057Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:54,060Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:54,070Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:54,071Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:54,074Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:54,088Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556967113432) {}
[INFO ] 2019-05-04T10:51:54,093Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:54,096Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-04T10:51:54,111Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:54,113Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:54,120Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T10:51:54,122Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:54,123Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:54,125Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-04T10:51:54,126Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556967113911) {}
[INFO ] 2019-05-04T10:51:54,155Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T10:51:54,157Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T10:51:54,159Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Responder (version 1) {}
[INFO ] 2019-05-04T10:51:55,072Z [Mock network] flow.[c4eeea25-45a2-42f6-8a71-aa3dff314332].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5374081589488607637). {}
[INFO ] 2019-05-04T10:51:55,221Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5374081589488607637). {invocation_id=1bb8e0ba-7671-4e43-8e91-89cb77a28c6e, invocation_timestamp=2019-05-04T10:51:55.213Z, session_id=1bb8e0ba-7671-4e43-8e91-89cb77a28c6e, session_timestamp=2019-05-04T10:51:55.213Z}
[INFO ] 2019-05-04T10:51:55,489Z [Mock network] flow.[c4eeea25-45a2-42f6-8a71-aa3dff314332].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1240744598542334539). {}
[INFO ] 2019-05-04T10:51:55,522Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1240744598542334539). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=f4a33837-9c56-4dbe-b007-216e6f30342b, invocation_timestamp=2019-05-04T10:51:55.521Z, session_id=f4a33837-9c56-4dbe-b007-216e6f30342b, session_timestamp=2019-05-04T10:51:55.521Z}
[INFO ] 2019-05-04T10:51:55,630Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.FungibleAsset, criteria: net.corda.core.node.services.vault.QueryCriteria$AndComposition@646cccb9, pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
