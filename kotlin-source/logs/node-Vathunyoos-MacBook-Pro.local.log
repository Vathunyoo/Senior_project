[INFO ] 2019-04-28T06:24:08,429Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-13b74dfb-2f6c-4e61-82db-cc0c70ebe10a.jar {}
[INFO ] 2019-04-28T06:24:08,485Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-f90407b3-78bd-4ed1-ac56-10baf28e31cd.jar {}
[INFO ] 2019-04-28T06:24:08,504Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-6cbc49c3-8623-4e15-8ec2-2c67222e858b.jar {}
[INFO ] 2019-04-28T06:24:08,535Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-13b74dfb-2f6c-4e61-82db-cc0c70ebe10a.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-f90407b3-78bd-4ed1-ac56-10baf28e31cd.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-6cbc49c3-8623-4e15-8ec2-2c67222e858b.jar, rootPackageName=null) {}
[INFO ] 2019-04-28T06:24:08,568Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:24:08,572Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:24:08,588Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-13b74dfb-2f6c-4e61-82db-cc0c70ebe10a.jar {}
[INFO ] 2019-04-28T06:24:08,624Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-f90407b3-78bd-4ed1-ac56-10baf28e31cd.jar {}
[INFO ] 2019-04-28T06:24:08,651Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-6cbc49c3-8623-4e15-8ec2-2c67222e858b.jar {}
[INFO ] 2019-04-28T06:24:08,802Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@71f86562 {}
[INFO ] 2019-04-28T06:24:09,520Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:24:09,580Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:24:09,590Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:24:11,524Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:24:12,163Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:24:12,165Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:12,178Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:12,286Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:12,289Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:12,464Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:24:12,474Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-28T06:24:12,576Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-28T06:24:12,794Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 331997E49A89B16EF293292CAEAD844BD0821A06962F11DED74D782DA69F76AD, not inserting the second time {}
[INFO ] 2019-04-28T06:24:12,864Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:12,888Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:24:12,890Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:12,892Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:12,894Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:24:12,896Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:12,902Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:24:12,905Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:24:12,929Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:24:12,942Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@26499067 {}
[INFO ] 2019-04-28T06:24:12,955Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:24:12,957Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:24:12,959Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:24:13,149Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:24:13,160Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:24:13,162Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:13,167Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:13,174Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:13,176Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:13,242Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:24:13,244Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:24:13,267Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F4709FE7F05CECE22E407DAA3585204F8249BCD95CE64553B60C37632A8AFE53, not inserting the second time {}
[INFO ] 2019-04-28T06:24:13,276Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:13,284Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:13,297Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:13,299Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:13,302Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:13,314Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:13,317Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:13,325Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:24:13,327Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:13,329Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:13,332Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:24:13,333Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:13,337Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:24:13,338Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:24:13,360Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:24:13,374Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3fc8a6c0 {}
[INFO ] 2019-04-28T06:24:13,390Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:24:13,392Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:24:13,394Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:24:13,554Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:24:13,581Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:24:13,587Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:13,594Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:13,603Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:13,606Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:13,687Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:24:13,689Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:24:13,711Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BFAC077EB02C469C9BEA5D80134D90F72C7294C13CA0D35DE5F6D0F00FDB048A, not inserting the second time {}
[INFO ] 2019-04-28T06:24:13,722Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:13,725Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:13,736Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:13,739Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:13,743Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:13,756Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:13,759Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:13,762Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:13,779Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:13,782Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:13,785Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:13,796Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:13,797Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:13,804Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:24:13,807Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:13,808Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:13,810Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:24:13,811Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:13,815Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:24:13,817Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:24:13,836Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:24:14,007Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2492f6fb {}
[INFO ] 2019-04-28T06:24:14,018Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:24:14,020Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:24:14,021Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:24:14,147Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:24:14,164Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:24:14,168Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,173Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:14,183Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,185Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,250Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:24:14,253Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:24:14,274Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 803C95E7964891F833A406CDA59826F9A871D027AA71587BB1041F7BAB6E9A50, not inserting the second time {}
[INFO ] 2019-04-28T06:24:14,283Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:14,287Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:14,304Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432652165) {}
[INFO ] 2019-04-28T06:24:14,305Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,308Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:14,319Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,321Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:14,325Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:14,335Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432653161) {}
[INFO ] 2019-04-28T06:24:14,337Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,340Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:14,350Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,351Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:14,354Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:14,363Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432653587) {}
[INFO ] 2019-04-28T06:24:14,365Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,367Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:24:14,377Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,378Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,384Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:24:14,396Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,400Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,404Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:24:14,405Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432654168) {}
[INFO ] 2019-04-28T06:24:14,423Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:24:14,424Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:24:14,426Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:24:15,446Z [Mock network] flow.[6862b513-c29e-43a8-b1dd-5358b8c12aa6].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2823524805865409864). {}
[INFO ] 2019-04-28T06:24:15,867Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2823524805865409864). {invocation_id=faeef8c3-129b-48c5-a9ea-b1309b1d3e56, invocation_timestamp=2019-04-28T06:24:15.856Z, session_id=faeef8c3-129b-48c5-a9ea-b1309b1d3e56, session_timestamp=2019-04-28T06:24:15.856Z}
[INFO ] 2019-04-28T06:24:16,149Z [Mock network] flow.[6862b513-c29e-43a8-b1dd-5358b8c12aa6].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-5585532806710947569). {}
[INFO ] 2019-04-28T06:24:16,180Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-5585532806710947569). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=3ac60bb9-1486-429c-8efc-58ffc8e1e394, invocation_timestamp=2019-04-28T06:24:16.179Z, session_id=3ac60bb9-1486-429c-8efc-58ffc8e1e394, session_timestamp=2019-04-28T06:24:16.179Z}
[INFO ] 2019-04-28T06:24:16,269Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.BondState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-28T06:26:24,847Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-3f91da3e-a0d4-42ee-8f87-c48b0609ca6b.jar {}
[INFO ] 2019-04-28T06:26:24,899Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-459bbcdc-f47a-44ac-bcd9-b1bc3c3a1e63.jar {}
[INFO ] 2019-04-28T06:26:24,916Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-02743254-d9f9-4375-9a70-68dc0e336dfc.jar {}
[INFO ] 2019-04-28T06:26:24,941Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3f91da3e-a0d4-42ee-8f87-c48b0609ca6b.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-459bbcdc-f47a-44ac-bcd9-b1bc3c3a1e63.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-02743254-d9f9-4375-9a70-68dc0e336dfc.jar, rootPackageName=null) {}
[INFO ] 2019-04-28T06:26:24,976Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:26:24,980Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:26:24,993Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3f91da3e-a0d4-42ee-8f87-c48b0609ca6b.jar {}
[INFO ] 2019-04-28T06:26:25,028Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-459bbcdc-f47a-44ac-bcd9-b1bc3c3a1e63.jar {}
[INFO ] 2019-04-28T06:26:25,057Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-02743254-d9f9-4375-9a70-68dc0e336dfc.jar {}
[INFO ] 2019-04-28T06:26:25,216Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7be3a837 {}
[INFO ] 2019-04-28T06:26:26,021Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:26:26,067Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:26:26,073Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:26:28,274Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:26:28,807Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:26:28,809Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:28,822Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:28,959Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:28,962Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:29,140Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:26:29,149Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-28T06:26:29,262Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-28T06:26:29,472Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 305670D91720F7B5EC6A5C867A3EF72C45E443F48F73CB7522DC84C570FB529B, not inserting the second time {}
[INFO ] 2019-04-28T06:26:29,549Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:29,577Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:26:29,579Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:29,581Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:29,583Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:26:29,585Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:29,591Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:26:29,593Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:26:29,617Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:26:29,630Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@33ce766b {}
[INFO ] 2019-04-28T06:26:29,645Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:26:29,647Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:26:29,649Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:26:29,848Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:26:29,859Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:26:29,861Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:29,867Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:29,875Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:29,877Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:29,948Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:26:29,952Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:26:29,983Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 4DD8BBFE37C38F0AAC44C2B0E77CC4192856F63FDA1C6AE746BBDED4CBD76FB0, not inserting the second time {}
[INFO ] 2019-04-28T06:26:29,995Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:30,001Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,015Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:30,017Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:30,020Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,031Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:30,032Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:30,038Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:26:30,039Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:30,041Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:30,043Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:26:30,045Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:30,048Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:26:30,050Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:26:30,078Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:26:30,089Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@411b4a70 {}
[INFO ] 2019-04-28T06:26:30,102Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:26:30,104Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:26:30,105Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:26:30,261Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:26:30,277Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:26:30,280Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,285Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,291Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,293Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,353Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:26:30,355Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:26:30,380Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 39170599646978EA08589AAFCCC3A56818DEF9E3010495E0680D6A25297CF78D, not inserting the second time {}
[INFO ] 2019-04-28T06:26:30,388Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:30,391Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,401Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:30,402Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,405Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,415Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,417Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:30,419Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,435Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:30,439Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,442Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,453Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,455Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,463Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:26:30,465Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,466Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,468Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:26:30,470Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,479Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:26:30,481Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:26:30,514Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:26:30,534Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@713d2fe8 {}
[INFO ] 2019-04-28T06:26:30,549Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:26:30,550Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:26:30,552Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:26:30,694Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:26:30,737Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:26:30,744Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:30,751Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,760Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:30,762Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:30,821Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:26:30,825Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:26:30,844Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3829314C90C944683F4BA1E5DB400ACD049F19C53693476CF24508511A06F8E1, not inserting the second time {}
[INFO ] 2019-04-28T06:26:30,853Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:30,857Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,872Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432788809) {}
[INFO ] 2019-04-28T06:26:30,876Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:30,879Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,889Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:30,892Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:30,895Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,910Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432789861) {}
[INFO ] 2019-04-28T06:26:30,914Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:30,918Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,933Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:30,935Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,941Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,956Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432790280) {}
[INFO ] 2019-04-28T06:26:30,959Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:30,962Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:26:30,983Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:30,985Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:30,994Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:26:30,996Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:30,997Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:30,999Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:26:31,001Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432790744) {}
[INFO ] 2019-04-28T06:26:31,030Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:26:31,032Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:26:31,033Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:26:31,930Z [Mock network] flow.[c129921b-ac72-44d9-96ce-dab36781d47e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8199341194831110820). {}
[INFO ] 2019-04-28T06:26:32,070Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8199341194831110820). {invocation_id=60bec4cd-7ce7-4215-aeac-deee924b9772, invocation_timestamp=2019-04-28T06:26:32.063Z, session_id=60bec4cd-7ce7-4215-aeac-deee924b9772, session_timestamp=2019-04-28T06:26:32.063Z}
[INFO ] 2019-04-28T06:26:32,315Z [Mock network] flow.[c129921b-ac72-44d9-96ce-dab36781d47e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2757120293460749137). {}
[INFO ] 2019-04-28T06:26:32,343Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2757120293460749137). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=58688d42-3f0a-4473-b59e-298464d35fd0, invocation_timestamp=2019-04-28T06:26:32.342Z, session_id=58688d42-3f0a-4473-b59e-298464d35fd0, session_timestamp=2019-04-28T06:26:32.342Z}
[INFO ] 2019-04-28T06:26:32,416Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.BondState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-28T06:28:39,183Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-956609ad-744a-4f4e-a916-75080211b6c7.jar {}
[INFO ] 2019-04-28T06:28:39,236Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-83671df9-7fed-4783-b1f1-cf7f01ffeab2.jar {}
[INFO ] 2019-04-28T06:28:39,254Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-21053214-7222-4267-96ad-1245619b0f4f.jar {}
[INFO ] 2019-04-28T06:28:39,286Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-956609ad-744a-4f4e-a916-75080211b6c7.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-83671df9-7fed-4783-b1f1-cf7f01ffeab2.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-21053214-7222-4267-96ad-1245619b0f4f.jar, rootPackageName=null) {}
[INFO ] 2019-04-28T06:28:39,331Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:28:39,337Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:28:39,353Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-956609ad-744a-4f4e-a916-75080211b6c7.jar {}
[INFO ] 2019-04-28T06:28:39,389Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-83671df9-7fed-4783-b1f1-cf7f01ffeab2.jar {}
[INFO ] 2019-04-28T06:28:39,415Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-21053214-7222-4267-96ad-1245619b0f4f.jar {}
[INFO ] 2019-04-28T06:28:39,571Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6915351c {}
[INFO ] 2019-04-28T06:28:40,356Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:28:40,402Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:28:40,407Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:28:42,604Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:28:43,152Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:28:43,155Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:43,168Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:43,276Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:43,279Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:43,464Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:28:43,476Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-28T06:28:43,581Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-28T06:28:43,799Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 82166031D9813FA333BF6F4AD70AE0D14970344C9B7D4946A3709FDC79EEA082, not inserting the second time {}
[INFO ] 2019-04-28T06:28:43,880Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:43,904Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:28:43,906Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:43,908Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:43,910Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:28:43,912Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:43,916Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:28:43,918Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:28:43,943Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:28:43,955Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7cfe97db {}
[INFO ] 2019-04-28T06:28:43,973Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:28:43,976Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:28:43,978Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:28:44,157Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:28:44,167Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:28:44,172Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:44,178Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:44,187Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:44,189Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:44,251Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:28:44,253Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:28:44,275Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A5F5017F969BB68C441E3C9BD0DB128D5BD21A19C4AF5D3DF116942444267E56, not inserting the second time {}
[INFO ] 2019-04-28T06:28:44,287Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:44,292Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:44,305Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:44,307Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:44,310Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:44,321Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:44,323Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:44,332Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:28:44,335Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:44,336Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:44,340Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:28:44,347Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:44,354Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:28:44,356Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:28:44,392Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:28:44,417Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3949fcdc {}
[INFO ] 2019-04-28T06:28:44,437Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:28:44,439Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:28:44,441Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:28:44,584Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:28:44,605Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:28:44,607Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:44,615Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:44,624Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:44,628Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:44,695Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:28:44,697Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:28:44,717Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 808311D0CF0D85CBD33BE804ECDE951C8A4AC823EB4672F0915B39DB4E0B514B, not inserting the second time {}
[INFO ] 2019-04-28T06:28:44,725Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:44,728Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:44,738Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:44,741Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:44,743Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:44,754Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:44,757Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:44,761Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:44,778Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:44,779Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:44,784Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:44,804Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:44,806Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:44,813Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:28:44,815Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:44,817Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:44,819Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:28:44,822Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:44,826Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:28:44,828Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:28:44,857Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:28:44,867Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@426ead99 {}
[INFO ] 2019-04-28T06:28:44,877Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:28:44,879Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:28:44,881Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:28:45,021Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:28:45,051Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:28:45,055Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,059Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:45,065Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,066Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,138Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:28:45,140Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:28:45,157Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 08DDC48D8547E3A0C56310FBD3714A7ADB5EF74F985391EFDD5E8D02DC22CB08, not inserting the second time {}
[INFO ] 2019-04-28T06:28:45,164Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:45,167Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:45,180Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556432923154) {}
[INFO ] 2019-04-28T06:28:45,181Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,184Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:45,201Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,203Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:45,209Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:45,223Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556432924172) {}
[INFO ] 2019-04-28T06:28:45,225Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,228Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:45,249Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,252Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:45,258Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:45,276Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556432924607) {}
[INFO ] 2019-04-28T06:28:45,280Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,282Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:28:45,298Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,302Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,307Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:28:45,308Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,310Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,311Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:28:45,312Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556432925054) {}
[INFO ] 2019-04-28T06:28:45,329Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:28:45,331Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:28:45,332Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:28:46,167Z [Mock network] flow.[fb9c990b-fda1-41e5-be43-b7aadde3f53f].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-243019780538225658). {}
[INFO ] 2019-04-28T06:28:46,313Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-243019780538225658). {invocation_id=a1cb5979-79da-435d-b53c-98adae4d1e2c, invocation_timestamp=2019-04-28T06:28:46.302Z, session_id=a1cb5979-79da-435d-b53c-98adae4d1e2c, session_timestamp=2019-04-28T06:28:46.302Z}
[INFO ] 2019-04-28T06:28:46,600Z [Mock network] flow.[fb9c990b-fda1-41e5-be43-b7aadde3f53f].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-409383130022982335). {}
[INFO ] 2019-04-28T06:28:46,634Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-409383130022982335). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=e9bc8238-b26d-4a4c-8f26-ca39d258af4f, invocation_timestamp=2019-04-28T06:28:46.633Z, session_id=e9bc8238-b26d-4a4c-8f26-ca39d258af4f, session_timestamp=2019-04-28T06:28:46.633Z}
[INFO ] 2019-04-28T06:28:46,726Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.BondState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-28T06:30:29,238Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-5aeba029-64c5-46bf-ad5c-5e8858a97e34.jar {}
[INFO ] 2019-04-28T06:30:29,308Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-15de76c6-f55d-4a77-babd-557d0bdec82a.jar {}
[INFO ] 2019-04-28T06:30:29,324Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-d63ab5fb-d0f4-4a3c-bb14-4f1db1495cd4.jar {}
[INFO ] 2019-04-28T06:30:29,349Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-5aeba029-64c5-46bf-ad5c-5e8858a97e34.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-15de76c6-f55d-4a77-babd-557d0bdec82a.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-d63ab5fb-d0f4-4a3c-bb14-4f1db1495cd4.jar, rootPackageName=null) {}
[INFO ] 2019-04-28T06:30:29,382Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:30:29,387Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:30:29,401Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-5aeba029-64c5-46bf-ad5c-5e8858a97e34.jar {}
[INFO ] 2019-04-28T06:30:29,438Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-15de76c6-f55d-4a77-babd-557d0bdec82a.jar {}
[INFO ] 2019-04-28T06:30:29,463Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-d63ab5fb-d0f4-4a3c-bb14-4f1db1495cd4.jar {}
[INFO ] 2019-04-28T06:30:29,602Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ef3efcc {}
[INFO ] 2019-04-28T06:30:30,535Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:30:30,600Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:30:30,609Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:30:32,620Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:30:33,147Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:30:33,150Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:33,167Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:33,268Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:33,272Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:33,448Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:30:33,457Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-28T06:30:33,564Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-28T06:30:33,792Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B19729A5375B080AB99AE2C41B0245A82B9DC339D13571B7FCF1A51CDD7260C0, not inserting the second time {}
[INFO ] 2019-04-28T06:30:33,875Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:33,900Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:30:33,902Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:33,904Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:33,906Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:30:33,907Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:33,912Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:30:33,914Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:30:33,938Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:30:33,951Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@63e31b89 {}
[INFO ] 2019-04-28T06:30:33,967Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:30:33,970Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:30:33,974Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:30:34,155Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:30:34,168Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:30:34,170Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:34,177Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:34,183Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:34,185Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:34,249Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:30:34,251Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:30:34,275Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E5C15710353F1D2EE17621BE0F2D027B163685FCF4B6592117821A3458F204FB, not inserting the second time {}
[INFO ] 2019-04-28T06:30:34,286Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:34,290Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:34,303Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:34,305Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:34,308Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:34,319Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:34,321Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:34,329Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:30:34,331Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:34,335Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:34,339Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:30:34,342Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:34,348Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:30:34,351Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:30:34,379Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:30:34,396Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5b82e090 {}
[INFO ] 2019-04-28T06:30:34,414Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:30:34,418Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:30:34,421Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:30:34,548Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:30:34,564Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:30:34,569Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:34,577Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:34,588Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:34,592Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:34,673Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:30:34,675Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:30:34,693Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 4C20B66EB73BCBA707A825F429B0A1585B4F129D28D1303405C627A391618345, not inserting the second time {}
[INFO ] 2019-04-28T06:30:34,701Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:34,704Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:34,715Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:34,716Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:34,719Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:34,730Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:34,731Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:34,736Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:34,749Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:34,751Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:34,754Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:34,771Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:34,774Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:34,784Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:30:34,785Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:34,787Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:34,791Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:30:34,794Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:34,798Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:30:34,800Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:30:34,831Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:30:34,846Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@24b73741 {}
[INFO ] 2019-04-28T06:30:34,865Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:30:34,869Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:30:35,015Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:30:35,142Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:30:35,158Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:30:35,161Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,166Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:35,177Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,179Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,238Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:30:35,244Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:30:35,269Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C469E238B31505AB5F423AFB822F2F03A79AEF6EEF118F56CEE7431424A51F7E, not inserting the second time {}
[INFO ] 2019-04-28T06:30:35,282Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:35,287Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:35,308Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556433033149) {}
[INFO ] 2019-04-28T06:30:35,311Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,314Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:35,331Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,333Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:35,336Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:35,347Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556433034170) {}
[INFO ] 2019-04-28T06:30:35,349Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,351Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:35,360Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,361Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:35,364Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:35,376Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556433034569) {}
[INFO ] 2019-04-28T06:30:35,378Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,380Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:30:35,392Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,394Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,398Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:30:35,400Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,402Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,403Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:30:35,404Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556433035161) {}
[INFO ] 2019-04-28T06:30:35,421Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:30:35,422Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:30:35,424Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:30:36,259Z [Mock network] flow.[b1a1e302-2b7a-4197-a2eb-56df145977fe].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2146579473659772667). {}
[INFO ] 2019-04-28T06:30:36,410Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2146579473659772667). {invocation_id=74237de2-0025-4389-83b2-235191f250b6, invocation_timestamp=2019-04-28T06:30:36.400Z, session_id=74237de2-0025-4389-83b2-235191f250b6, session_timestamp=2019-04-28T06:30:36.400Z}
[INFO ] 2019-04-28T06:30:36,669Z [Mock network] flow.[b1a1e302-2b7a-4197-a2eb-56df145977fe].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3148303586991800735). {}
[INFO ] 2019-04-28T06:30:36,694Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3148303586991800735). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=41e23083-1faf-4b67-895f-ec9a15afb71c, invocation_timestamp=2019-04-28T06:30:36.693Z, session_id=41e23083-1faf-4b67-895f-ec9a15afb71c, session_timestamp=2019-04-28T06:30:36.693Z}
[INFO ] 2019-04-28T06:30:36,770Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.BondState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-28T06:54:13,667Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-06befe07-1d70-4a71-9664-f3661b93860d.jar {}
[INFO ] 2019-04-28T06:54:13,736Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-6005c849-c9e2-42e0-9f97-f6171b86fcde.jar {}
[INFO ] 2019-04-28T06:54:13,753Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-d1dab912-67fd-46f0-a7d7-1308c3e4a093.jar {}
[INFO ] 2019-04-28T06:54:13,786Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-06befe07-1d70-4a71-9664-f3661b93860d.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-6005c849-c9e2-42e0-9f97-f6171b86fcde.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-d1dab912-67fd-46f0-a7d7-1308c3e4a093.jar, rootPackageName=null) {}
[INFO ] 2019-04-28T06:54:13,820Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:54:13,824Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:54:13,836Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-06befe07-1d70-4a71-9664-f3661b93860d.jar {}
[INFO ] 2019-04-28T06:54:13,867Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-6005c849-c9e2-42e0-9f97-f6171b86fcde.jar {}
[INFO ] 2019-04-28T06:54:13,892Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-d1dab912-67fd-46f0-a7d7-1308c3e4a093.jar {}
[INFO ] 2019-04-28T06:54:14,055Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6915351c {}
[INFO ] 2019-04-28T06:54:14,874Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:54:14,918Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:54:14,923Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:54:17,126Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:54:17,648Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:54:17,651Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:17,685Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:17,788Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:17,790Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:17,989Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:54:17,995Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-28T06:54:18,093Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-28T06:54:18,293Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 2A03D20396B4F6833188790CB21CEA718C76847B567CD46E359CF9D3363A11B0, not inserting the second time {}
[INFO ] 2019-04-28T06:54:18,360Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:18,386Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:54:18,388Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:18,390Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:18,392Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:54:18,394Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:18,400Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:54:18,403Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:54:18,423Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:54:18,437Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@33ce766b {}
[INFO ] 2019-04-28T06:54:18,450Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:54:18,452Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:54:18,454Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:54:18,640Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:54:18,651Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:54:18,653Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:18,659Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:18,690Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:18,692Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:18,754Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:54:18,756Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:54:18,778Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BA1D7C7E7BB539F69949A94CF6B83D546E5569E978DBAF24BE1ED25D4A94DAEC, not inserting the second time {}
[INFO ] 2019-04-28T06:54:18,789Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:18,794Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:18,809Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:18,812Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:18,815Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:18,829Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:18,832Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:18,842Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:54:18,844Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:18,848Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:18,852Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:54:18,855Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:18,861Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:54:18,865Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:54:18,893Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:54:18,912Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@411b4a70 {}
[INFO ] 2019-04-28T06:54:18,930Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:54:18,934Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:54:18,936Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:54:19,073Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:54:19,091Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:54:19,096Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,103Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:19,118Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,120Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,180Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:54:19,182Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:54:19,203Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 18F89FA2995C647332524AEA9CDEE5D5AB2C7450AD728C4EDBEC78FBB238A1DC, not inserting the second time {}
[INFO ] 2019-04-28T06:54:19,215Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:19,220Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:19,231Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:19,233Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,235Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:19,250Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,253Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:19,255Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:19,269Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:19,273Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,276Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:19,295Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,297Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,306Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:54:19,312Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,316Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,319Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:54:19,321Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,327Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:54:19,328Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:54:19,357Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:54:19,369Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6c40bb07 {}
[INFO ] 2019-04-28T06:54:19,384Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:54:19,386Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:54:19,388Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:54:19,544Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:54:19,566Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:54:19,569Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,574Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:19,583Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,584Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,641Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:54:19,643Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:54:19,676Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D3148C7DF71CD30B5230B3A5FED8E0CD348F3020AC079CAF869C46A67AED19DF, not inserting the second time {}
[INFO ] 2019-04-28T06:54:19,687Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:19,691Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:19,701Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434457651) {}
[INFO ] 2019-04-28T06:54:19,703Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,709Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:19,725Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,727Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:19,730Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:19,747Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434458653) {}
[INFO ] 2019-04-28T06:54:19,773Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,789Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:19,805Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,807Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,810Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:19,821Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434459096) {}
[INFO ] 2019-04-28T06:54:19,834Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,837Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:54:19,850Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,853Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,861Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:54:19,862Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,865Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,867Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:54:19,869Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434459569) {}
[INFO ] 2019-04-28T06:54:19,889Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:54:19,890Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:54:19,891Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:54:20,923Z [Mock network] flow.[fc2b7252-fedb-4191-8440-3365369c80da].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7036981671119968044). {}
[INFO ] 2019-04-28T06:54:21,101Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7036981671119968044). {invocation_id=1acf188d-c0d2-4f52-bba1-c10b7c7637c1, invocation_timestamp=2019-04-28T06:54:21.090Z, session_id=1acf188d-c0d2-4f52-bba1-c10b7c7637c1, session_timestamp=2019-04-28T06:54:21.090Z}
[INFO ] 2019-04-28T06:54:21,358Z [Mock network] flow.[fc2b7252-fedb-4191-8440-3365369c80da].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2105077655225812126). {}
[INFO ] 2019-04-28T06:54:21,387Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2105077655225812126). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=09ba358c-03fc-4bb9-8a2f-0cf78d29174f, invocation_timestamp=2019-04-28T06:54:21.386Z, session_id=09ba358c-03fc-4bb9-8a2f-0cf78d29174f, session_timestamp=2019-04-28T06:54:21.386Z}
[INFO ] 2019-04-28T06:54:21,456Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.ContractState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-28T06:55:21,192Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/test/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-230da229-efad-462b-9081-fd9dbf09e510.jar {}
[INFO ] 2019-04-28T06:55:21,241Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/contract: build/tmp/generated-test-cordapps/com.example.contract-11545b41-f925-472f-ac93-b348742e855d.jar {}
[INFO ] 2019-04-28T06:55:21,258Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/out/production/classes/com/example/schema: build/tmp/generated-test-cordapps/com.example.schema-9c05f0c7-82e1-4256-987d-274a84c3a5d4.jar {}
[INFO ] 2019-04-28T06:55:21,284Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-230da229-efad-462b-9081-fd9dbf09e510.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-11545b41-f925-472f-ac93-b348742e855d.jar, rootPackageName=null), RestrictedURL(url=file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-9c05f0c7-82e1-4256-987d-274a84c3a5d4.jar, rootPackageName=null) {}
[INFO ] 2019-04-28T06:55:21,313Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:55:21,318Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:55:21,341Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-230da229-efad-462b-9081-fd9dbf09e510.jar {}
[INFO ] 2019-04-28T06:55:21,375Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-11545b41-f925-472f-ac93-b348742e855d.jar {}
[INFO ] 2019-04-28T06:55:21,400Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/vathunyoo/Desktop/GitHub/Senior_project/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-9c05f0c7-82e1-4256-987d-274a84c3a5d4.jar {}
[INFO ] 2019-04-28T06:55:21,559Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7be3a837 {}
[INFO ] 2019-04-28T06:55:22,326Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:55:22,371Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:55:22,377Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:55:24,573Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:55:25,104Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:55:25,106Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:25,119Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:25,227Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:25,229Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:25,419Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:55:25,425Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-28T06:55:25,524Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-28T06:55:25,757Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D6787E53F3C3368666228179E1045870188CC36B354E7EEC358137857A0E5C3E, not inserting the second time {}
[INFO ] 2019-04-28T06:55:25,840Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:25,866Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:55:25,868Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:25,870Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:25,872Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:55:25,874Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:25,880Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:55:25,882Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:55:25,903Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:55:25,919Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5390bdee {}
[INFO ] 2019-04-28T06:55:25,932Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:55:25,935Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:55:25,937Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:55:26,132Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:55:26,142Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:55:26,144Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:26,150Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:26,157Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:26,159Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:26,216Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:55:26,220Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:55:26,241Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5ED9250BF0A8E69C4D1C10741187A0675CD7B6955624AD0A4F2CF3AA2A4624BF, not inserting the second time {}
[INFO ] 2019-04-28T06:55:26,251Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:26,255Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:26,268Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:26,270Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:26,273Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:26,282Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:26,283Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:26,291Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:55:26,294Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:26,296Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:26,298Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:55:26,300Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:26,308Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:55:26,311Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:55:26,341Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:55:26,361Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@649ded12 {}
[INFO ] 2019-04-28T06:55:26,378Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:55:26,386Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:55:26,389Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:55:26,534Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:55:26,549Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:55:26,553Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:26,561Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:26,570Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:26,573Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:26,638Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:55:26,640Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:55:26,657Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A39B3C5D9DABF815DD67EC725D56CAA139E2EE53EAD6C68B3EF5CD41D6288B09, not inserting the second time {}
[INFO ] 2019-04-28T06:55:26,677Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:26,680Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:26,691Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:26,692Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:26,695Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:26,706Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:26,707Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:26,710Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:26,725Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:26,727Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:26,730Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:26,743Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:26,745Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:26,756Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:55:26,758Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:26,759Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:26,760Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:55:26,761Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:26,768Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-28T06:55:26,772Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-28T06:55:26,797Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-28T06:55:26,809Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@546c43e0 {}
[INFO ] 2019-04-28T06:55:26,825Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-28T06:55:26,829Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:55:26,834Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:55:26,955Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), BondSchemaV1(name=com.example.schema.BondSchema, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-28T06:55:26,979Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-28T06:55:26,982Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:26,991Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:27,002Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:27,004Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:27,074Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A30D29ED62B2B3C869EECDF9FA7F916228EF854269DCCE6C877AF388E076B16 {}
[WARN ] 2019-04-28T06:55:27,076Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-28T06:55:27,097Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 903DFB9DA391C24382550A2863506140F9FE5F55317E73CD077BC857810DBF0B, not inserting the second time {}
[INFO ] 2019-04-28T06:55:27,105Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:27,107Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:27,115Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1556434525106) {}
[INFO ] 2019-04-28T06:55:27,116Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:27,119Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:27,132Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:27,134Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:27,137Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:27,147Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1556434526144) {}
[INFO ] 2019-04-28T06:55:27,148Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:27,151Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:27,160Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:27,162Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:27,164Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:27,174Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1556434526553) {}
[INFO ] 2019-04-28T06:55:27,176Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:27,179Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-28T06:55:27,193Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:27,196Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:27,204Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:55:27,206Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:27,208Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:27,211Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-28T06:55:27,213Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 3, L=London, C=GB], platformVersion=1, serial=1556434526982) {}
[INFO ] 2019-04-28T06:55:27,241Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:55:27,242Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:55:27,244Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.BondFlow_Issue$Initiator to initiate com.example.flow.BondFlow_Issue$Acceptor (version 1) {}
[INFO ] 2019-04-28T06:55:28,140Z [Mock network] flow.[0ff27a1d-99bf-4848-8e1b-54abac38f99e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5707017114584835407). {}
[INFO ] 2019-04-28T06:55:28,290Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5707017114584835407). {invocation_id=4a8647ba-e5e5-4eb2-8c09-ba13d23569ca, invocation_timestamp=2019-04-28T06:55:28.283Z, session_id=4a8647ba-e5e5-4eb2-8c09-ba13d23569ca, session_timestamp=2019-04-28T06:55:28.283Z}
[INFO ] 2019-04-28T06:55:28,535Z [Mock network] flow.[0ff27a1d-99bf-4848-8e1b-54abac38f99e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7898899278470344548). {}
[INFO ] 2019-04-28T06:55:28,559Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7898899278470344548). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=f20b3e72-7c83-44e2-a2d7-dbbd6df2904a, invocation_timestamp=2019-04-28T06:55:28.558Z, session_id=f20b3e72-7c83-44e2-a2d7-dbbd6df2904a, session_timestamp=2019-04-28T06:55:28.558Z}
[INFO ] 2019-04-28T06:55:28,633Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.LinearState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
